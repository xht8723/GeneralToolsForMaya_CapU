from ctypes import alignment
import os
import sys
from PySide2 import QtCore, QtWidgets, QtGui
import maya.cmds as cmds

MESH = "mesh"  #maya node name const
CAM = "camera" #maya node name const
TRANSFORM = "transform" #maya node name const

#------------------------------------------------------------------------------------------------------
#Utility function that list all objects in the scene that matches the type(Defualt mesh).
#Return a list of strings of names of the objects.
#------------------------------------------------------------------------------------------------------
def lsAll(targetType = MESH):
    if targetType != MESH:
        if targetType != CAM:
            return
        camList = cmds.ls(exactType = CAM)
        return camList
    meshList = cmds.ls(exactType = MESH)
    return meshList


#------------------------------------------------------------------------------------------------------
#Utility function that take a list of shapes and return a list of their corresponding transforms.
#Return a list of strings of names of the transforms.
#------------------------------------------------------------------------------------------------------
def shape2Transform(aList):
    resultList = []
    for item in aList:
        resultList.append(cmds.listRelatives(item, parent = 1))
    return resultList
        

#------------------------------------------------------------------------------------------------------
#Utility function that select all object matches the type.(default mesh)
#    &&&   WIP   &&&
#------------------------------------------------------------------------------------------------------
def selectAll(targetType = MESH):
    if targetType != MESH:
        return


#------------------------------------------------------------------------------------------------------
#main menu window class
#------------------------------------------------------------------------------------------------------
class SCPmain(QtWidgets.QWidget):
    #constructor
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Smart Camera Placement")
        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowStaysOnTopHint)
        
        #Widgets
        self.meshText = QtWidgets.QLabel("Select a mesh as point of interest: ")
        self.meshList = QtWidgets.QComboBox()
        self.meshList.setToolTip('What did the modeler say to the psychologist? \n"My life is a mesh!"')

        self.compoText = QtWidgets.QLabel("Select the composition rule: \nWIP")
        self.compositionList = QtWidgets.QComboBox()
        self.compositionList.setToolTip('What have Illuminati and Golden Ration in common?\n"They are both a myth..."')

        self.camText = QtWidgets.QLabel("Select camera: ")
        self.camList = QtWidgets.QComboBox()
        self.camList.setToolTip("I accidentally washed my father's camera's memory card. He's furious because now all the images are watermarked.")
        self.camText1 = QtWidgets.QLabel("Select camera: ")
        self.camList1 = QtWidgets.QComboBox()
        self.camList1.setToolTip("I accidentally washed my father's camera's memory card. He's furious because now all the images are watermarked.")

        self.startButton = QtWidgets.QPushButton("Smart placement (WIP)")
        self.startButton.setToolTip("Auto place the camera to the best place according to the settings.")

        self.rigCamButton = QtWidgets.QPushButton("Rig the camera")
        self.rigCamButton.setToolTip("Setup a basic rig to the selected camera. \n Works with an aim camera.")
        self.rigCamButton.released.connect(self.doCameraRig)

        self.easyCutButton = QtWidgets.QPushButton("Easy Camera Cut (WIP)")
        self.easyCutButton.setToolTip("Create a cut for selected camera and give it a translate keyframe at perspective camera's current position. \nWIP")

        self.refreshButton = QtWidgets.QPushButton("Refresh dropdown lists")
        self.refreshButton.setToolTip("Refreshment means snacks.\nSo refresh must have meaning of eating.\nBut click this won't get you any cookies.")
        self.refreshButton.released.connect(self.initializeComboBox)

        self.controllerText = QtWidgets.QLabel("Create nurbs curve:")
        self.arrow180Button = QtWidgets.QPushButton("Arrow 180")
        self.arrow180Button.released.connect(self.arrow180)
        self.arrow360Button = QtWidgets.QPushButton("Arrow 360")
        self.arrow360Button.released.connect(self.arrow360)
        self.arrowBeltButton = QtWidgets.QPushButton("Arrow Belt")
        self.arrowBeltButton.released.connect(self.arrowBelt)
        self.arrowBowlButton = QtWidgets.QPushButton("Arrow Bowl")
        self.arrowBowlButton.released.connect(self.arrowBowl)
        self.arrowCircleButton = QtWidgets.QPushButton("Arrow Circle")
        self.arrowCircleButton.released.connect(self.arrowCircle)
        self.arrowHalfCircleButton = QtWidgets.QPushButton("Arrow Half Circle")
        self.arrowHalfCircleButton.released.connect(self.arrowHalfCircle)
        self.arrowMultiBurstButton = QtWidgets.QPushButton("Arrow MultiBurst")
        self.arrowMultiBurstButton.released.connect(self.arrowMultiBurst)
        self.arrowStraightButton = QtWidgets.QPushButton("Arrow Straight")
        self.arrowStraightButton.released.connect(self.arrowStraight)
        self.arrowWheelButton = QtWidgets.QPushButton("Arrow Wheel")
        self.arrowWheelButton.released.connect(self.arrowWheel)
        self.ballArrowsButton = QtWidgets.QPushButton("Ball Arrow")
        self.ballArrowsButton.released.connect(self.ballArrows)
        self.CircleButton = QtWidgets.QPushButton("Circle")
        self.CircleButton.released.connect(self.circle)
        self.ConeButton = QtWidgets.QPushButton("Cone")
        self.ConeButton.released.connect(self.cone)
        self.crossButton = QtWidgets.QPushButton("Cross")
        self.crossButton.released.connect(self.cross)
        self.cubeButton = QtWidgets.QPushButton("Cube")
        self.cubeButton.released.connect(self.cube)
        self.eightArrowButton = QtWidgets.QPushButton("Eight Arrow")
        self.eightArrowButton.released.connect(self.eightArrow)
        self.cylinderButton = QtWidgets.QPushButton("Cylinder")
        self.cylinderButton.released.connect(self.cylinder)
        self.dumbellButton = QtWidgets.QPushButton("Dumbell")
        self.dumbellButton.released.connect(self.dumbell)
        self.eyeButton = QtWidgets.QPushButton("Eye")
        self.eyeButton.released.connect(self.eye)
        self.footButton = QtWidgets.QPushButton("Foot")
        self.footButton.released.connect(self.foot)
        self.handButton = QtWidgets.QPushButton("Hand")
        self.handButton.released.connect(self.hand)
        self.hitachiButton = QtWidgets.QPushButton("Hitachi")
        self.hitachiButton.released.connect(self.hitachi)
        self.jackButton = QtWidgets.QPushButton("Jack")
        self.jackButton.released.connect(self.jack)
        self.keyButton = QtWidgets.QPushButton("Key")
        self.keyButton.released.connect(self.key)
        self.locatorButton = QtWidgets.QPushButton("Locator(curve)")
        self.locatorButton.released.connect(self.locator)
        self.nasalStripButton = QtWidgets.QPushButton("Nasal Strip")
        self.nasalStripButton.released.connect(self.nasalStrip)
        self.pinArrowButton = QtWidgets.QPushButton("Pin Arrow")
        self.pinArrowButton.released.connect(self.pinArrow)
        self.pinCircleButton = QtWidgets.QPushButton("Pin Circle")
        self.pinCircleButton.released.connect(self.pinCircle)
        self.pinStarburstButton = QtWidgets.QPushButton("Pin Starburst")
        self.pinStarburstButton.released.connect(self.pinStarBurst)
        self.pyramidButton = QtWidgets.QPushButton("Pyriamid")
        self.pyramidButton.released.connect(self.pyramid)
        self.shoulderButton = QtWidgets.QPushButton("Shoulder")
        self.shoulderButton.released.connect(self.shoulder)
        self.slideBackButton = QtWidgets.QPushButton("Slide back")
        self.slideBackButton.released.connect(self.slideback)
        self.slideKnobButton = QtWidgets.QPushButton("Slide Knob")
        self.slideKnobButton.released.connect(self.slideKnob)
        self.sphereHalfButton = QtWidgets.QPushButton("Sphere Half")
        self.sphereHalfButton.released.connect(self.sphereHalf)
        self.sphereButton = QtWidgets.QPushButton("Sphere")
        self.sphereButton.released.connect(self.sphere)
        self.spiralButton = QtWidgets.QPushButton("Spiral")
        self.spiralButton.released.connect(self.spiral)
        self.squareButton = QtWidgets.QPushButton("Squre")
        self.squareButton.released.connect(self.square)
        self.sunDialButton = QtWidgets.QPushButton("Sun Dial")
        self.sunDialButton.released.connect(self.sunDial)
        self.sunButton = QtWidgets.QPushButton("Sun")
        self.sunButton.released.connect(self.sun)
        self.thinArrowButton = QtWidgets.QPushButton("Thin Arrow")
        self.thinArrowButton.released.connect(self.thinArrow)
        self.wingButton = QtWidgets.QPushButton("Wing")
        self.wingButton.released.connect(self.wing)
        self.wireArrow180Button = QtWidgets.QPushButton("Wire Arrow 180")
        self.wireArrow180Button.released.connect(self.wireArrow180)
        self.wireArrowBluntButton = QtWidgets.QPushButton("Wire Arrow Blunt")
        self.wireArrowBluntButton.released.connect(self.wireArrowBlunt)
        self.wireArrowCircleButton = QtWidgets.QPushButton("Wire Arrow Circle")
        self.wireArrowCircleButton.released.connect(self.wireArrowCircle)
        self.wireArrowDialButton = QtWidgets.QPushButton("Wire Arrow Dial")
        self.wireArrowDialButton.released.connect(self.wireArrowDial)
        self.wireArrowTipsButton = QtWidgets.QPushButton("Wire Arrow Tips")
        self.wireArrowTipsButton.released.connect(self.wireArrowTips)
        self.wireCircleLocatorButton = QtWidgets.QPushButton("Wire Circle Locator")
        self.wireCircleLocatorButton.released.connect(self.wireCircleLocator)
        self.wireFullCompassButton = QtWidgets.QPushButton("Wire Full Compass")
        self.wireFullCompassButton.released.connect(self.wireFullCompass)
        self.wireThinArrowButton = QtWidgets.QPushButton("Wire Thin Arrow")
        self.wireThinArrowButton.released.connect(self.wireThinArrow)
        self.wireTransformButton = QtWidgets.QPushButton("Wire Transform")
        self.wireTransformButton.released.connect(self.wireTransform)
        self.bulbButton = QtWidgets.QPushButton("Bulb")
        self.bulbButton.released.connect(self.Bulb)


        #creating tabs
        tabs = QtWidgets.QTabWidget()
        animationTab = QtWidgets.QWidget()
        riggingTab = QtWidgets.QWidget()
        modelingTab = QtWidgets.QWidget()
        tabs.addTab(riggingTab, "Rigging")
        tabs.addTab(animationTab, "Animation")
        tabs.addTab(modelingTab, "Modeling")


        #Rigging tab Layout
        vRiggingLayout = QtWidgets.QVBoxLayout(alignment = QtCore.Qt.AlignCenter)
        hRiggingLayout = QtWidgets.QHBoxLayout(alignment = QtCore.Qt.AlignCenter)

        hRiggingLayout.addWidget(self.camText)
        hRiggingLayout.addWidget(self.camList)
        hRiggingLayout.addWidget(self.rigCamButton)

        controllerLayout = QtWidgets.QGridLayout()
        controllerLayout.addWidget(self.controllerText, 0, 0, alignment = QtCore.Qt.AlignBottom)
        controllerLayout.addWidget(self.arrow180Button, 1, 0)
        controllerLayout.addWidget(self.arrow360Button, 1, 1)
        controllerLayout.addWidget(self.arrowBeltButton, 1, 2)
        controllerLayout.addWidget(self.arrowBowlButton, 1, 3)
        controllerLayout.addWidget(self.arrowCircleButton, 1, 4)

        controllerLayout.addWidget(self.arrowHalfCircleButton, 2, 0)
        controllerLayout.addWidget(self.arrowMultiBurstButton, 2, 1)
        controllerLayout.addWidget(self.arrowStraightButton, 2, 2)
        controllerLayout.addWidget(self.arrowWheelButton, 2, 3)
        controllerLayout.addWidget(self.ballArrowsButton, 2, 4)

        controllerLayout.addWidget(self.CircleButton, 3, 0)
        controllerLayout.addWidget(self.ConeButton, 3, 1)
        controllerLayout.addWidget(self.crossButton, 3, 2)
        controllerLayout.addWidget(self.cubeButton, 3, 3)
        controllerLayout.addWidget(self.eightArrowButton, 3, 4)

        controllerLayout.addWidget(self.cylinderButton, 4, 0)
        controllerLayout.addWidget(self.dumbellButton, 4, 1)
        controllerLayout.addWidget(self.eyeButton, 4, 2)
        controllerLayout.addWidget(self.footButton, 4, 3)
        controllerLayout.addWidget(self.handButton, 4, 4)

        controllerLayout.addWidget(self.hitachiButton, 5, 0)
        controllerLayout.addWidget(self.jackButton, 5, 1)
        controllerLayout.addWidget(self.keyButton, 5, 2)
        controllerLayout.addWidget(self.locatorButton, 5, 3)
        controllerLayout.addWidget(self.nasalStripButton, 5, 4)

        controllerLayout.addWidget(self.pinArrowButton, 6, 0)
        controllerLayout.addWidget(self.pinCircleButton, 6, 1)
        controllerLayout.addWidget(self.pinStarburstButton, 6, 2)
        controllerLayout.addWidget(self.pyramidButton, 6, 3)
        controllerLayout.addWidget(self.shoulderButton, 6, 4)

        controllerLayout.addWidget(self.slideBackButton, 7, 0)
        controllerLayout.addWidget(self.slideKnobButton, 7, 1)
        controllerLayout.addWidget(self.sphereHalfButton, 7, 2)
        controllerLayout.addWidget(self.sphereButton, 7, 3)
        controllerLayout.addWidget(self.spiralButton, 7, 4)

        controllerLayout.addWidget(self.squareButton, 8, 0)
        controllerLayout.addWidget(self.sunDialButton, 8, 1)
        controllerLayout.addWidget(self.sunButton, 8, 2)
        controllerLayout.addWidget(self.thinArrowButton, 8, 3)
        controllerLayout.addWidget(self.wingButton, 8, 4)

        controllerLayout.addWidget(self.wireArrow180Button, 9, 0)
        controllerLayout.addWidget(self.wireArrowBluntButton, 9, 1)
        controllerLayout.addWidget(self.wireArrowCircleButton, 9 ,2)
        controllerLayout.addWidget(self.wireArrowDialButton, 9, 3)
        controllerLayout.addWidget(self.wireArrowTipsButton, 9, 4)

        controllerLayout.addWidget(self.wireCircleLocatorButton, 10, 0)
        controllerLayout.addWidget(self.wireFullCompassButton, 10, 1)
        controllerLayout.addWidget(self.wireThinArrowButton, 10, 2)
        controllerLayout.addWidget(self.wireTransformButton, 10, 3)
        controllerLayout.addWidget(self.bulbButton, 10, 4)

        controllerLayout.setContentsMargins(0,50,0,0)

        vRiggingLayout.addLayout(hRiggingLayout)
        vRiggingLayout.addLayout(controllerLayout)

        riggingTab.setLayout(vRiggingLayout)


        #Animation tab Layout
        vAnimationLayout = QtWidgets.QVBoxLayout(alignment = QtCore.Qt.AlignCenter)
        hAnimationLayout = QtWidgets.QHBoxLayout(alignment = QtCore.Qt.AlignCenter)

        hAnimationLayout.addWidget(self.camText1, alignment = QtCore.Qt.AlignRight)
        hAnimationLayout.addWidget(self.camList1)
        hAnimationLayout.addWidget(self.easyCutButton)

        animationTab.setLayout(hAnimationLayout)


        #Modeling tab Layout
        vModelingLayout = QtWidgets.QVBoxLayout(alignment = QtCore.Qt.AlignCenter)
        hModelingLayout = QtWidgets.QHBoxLayout(alignment = QtCore.Qt.AlignCenter)

        hModelingLayout.addWidget(self.meshText, alignment = QtCore.Qt.AlignRight)
        hModelingLayout.addWidget(self.meshList)

        modelingTab.setLayout(hModelingLayout)

        
        #Main Layout
        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.addWidget(tabs)
        self.layout.addWidget(self.refreshButton)
        
        #Add dropList items
        self.initializeComboBox()
        
        

#------------------------------------------------------------------------------------------------------
    #A class function updates all the combobox.
    #Return Void
#------------------------------------------------------------------------------------------------------
    def initializeComboBox(self):
        self.meshList.clear()
        self.camList.clear()
        self.camList1.clear()
        self.compositionList.clear()

        self.compositionList.addItem("Rule of 3rd")
        self.compositionList.addItem("Golden Ratio")
        self.compositionList.addItem("Dominant")

        lsOfmesh = lsAll()
        for mesh in lsOfmesh:
            self.meshList.addItem(mesh)
        
        lsOfCam = lsAll(CAM)
        for cam in lsOfCam:
            self.camList.addItem(cam)
            self.camList1.addItem(cam)
        return


#------------------------------------------------------------------------------------------------------
    #A class function that builds a camera rig on selected camera.
    #Return Void
#------------------------------------------------------------------------------------------------------
    def doCameraRig(self):
        selectedCam = cmds.listRelatives(self.camList.currentText(), parent = 1)[0]
        camScaleX = cmds.getAttr(selectedCam + ".sx")
        camScaleY = cmds.getAttr(selectedCam + ".sy")
        camScaleZ = cmds.getAttr(selectedCam + ".sz")
        camRotationX = cmds.getAttr(selectedCam + ".rx")
        camRotationY = cmds.getAttr(selectedCam + ".ry")
        camRotationZ = cmds.getAttr(selectedCam + ".rz")

        outerLayer = cmds.circle(name = selectedCam + "_OuterLayer_ctrl")[0]
        midLayer = cmds.circle(name = selectedCam + "_MiddleLayer_ctrl")[0]
        innerLayer = cmds.circle(name = selectedCam + "_InnerLayer_ctrl")[0]
        outerEmpty = cmds.group(em = 1, n = outerLayer + "Os")
        midEmpty = cmds.group(em = 1, n = midLayer + "Os")
        innerEmpty = cmds.group(em = 1, n = innerLayer + "Os")
        bulb = self.Bulb()
        bulb = cmds.rename(bulb, "Switches_ctrl")
        bulbEmpty = cmds.group(em = 1, n = bulb + "Os")
        locator = self.wireCircleLocator()
        locator = cmds.rename(locator, "Aimer_ctrl")
        locatorEmpty = cmds.group(em = 1, n = locator + "Os")

        cmds.parent(outerLayer, outerEmpty)
        cmds.parent(midLayer, midEmpty)
        cmds.parent(innerLayer, innerEmpty)
        cmds.parent(locator, locatorEmpty)
        cmds.parent(bulb, bulbEmpty)

        cmds.matchTransform([outerEmpty, midEmpty, innerEmpty, locatorEmpty, bulbEmpty], selectedCam)

        cmds.scale(camScaleX*2, camScaleY*2, camScaleZ*2, innerEmpty)
        cmds.scale(camScaleX*2.5, camScaleY*2.5, camScaleZ*2.5, midEmpty)
        cmds.scale(camScaleX*3, camScaleY*3, camScaleZ*3, outerEmpty)
        cmds.scale(camScaleX*0.15, camScaleY*0.15, camScaleZ*0.15, locatorEmpty)
        cmds.scale(camScaleX*0.5, camScaleY*0.5, camScaleZ*0.5, bulbEmpty)

        cmds.rotate(camRotationX,camRotationY,camRotationZ,locatorEmpty)
        cmds.move(-camScaleX*6, locatorEmpty, os = 1, z = 1, wd = 1)
        cmds.move(camScaleX*5, bulbEmpty, ws = 1, y = 1, wd = 1)
        cmds.rotate(90, 0, 0, [outerEmpty, midEmpty, innerEmpty])

        cmds.parent(midEmpty, outerLayer)
        cmds.parent(innerEmpty, midLayer)
        cmds.parent(selectedCam, innerLayer)
        cmds.parent(locatorEmpty, innerLayer)
        cmds.parent(bulbEmpty, innerLayer)

        constraint = cmds.aimConstraint(locator, selectedCam, mo = 1)

        cmds.select(bulb)
        cmds.addAttr(attributeType = "float", defaultValue = 1.0, softMaxValue = 1.0, softMinValue = 0.0, longName = "Aim_Switch", keyable = 1)

        cmds.connectAttr(bulb + ".Aim_Switch", constraint[0] + ".Aimer_ctrlW0")
        cmds.connectAttr(bulb + ".Aim_Switch", locator + ".visibility")
        return
    

#------------------------------------------------------------------------------------------------------
#Algorithm for smart camera placement.
#------------------------------------------------------------------------------------------------------
    def SmartCamera(self):
        #god i haven't done math for so long...
        return


#------------------------------------------------------------------------------------------------------
#Functions to create curves.
#------------------------------------------------------------------------------------------------------
    def arrow180(self):
        return cmds.curve(d=1, p = [(2.635711045970995, -2.874089854998373e-14, -8.366325043590853), (5.394190551311968, -4.980044154834218e-13, -5.588550353929405), (5.394190551311968, -4.980044154834218e-13, -5.588550353929405), (5.394190551311955, -3.0299374120801303e-13, -13.95016097257651), (5.394190551311955, -3.0299374120801303e-13, -13.95016097257651), (-2.8812479647109894, 9.09813890892508e-13, -13.921874422913778), (-2.8812479647109894, 9.09813890892508e-13, -13.921874422913778), (-0.12276845937000942, 4.405226183834543e-13, -11.144099733252318), (-0.12276845937000942, 4.405226183834543e-13, -11.144099733252318), (-4.118696150600751, 9.091477570777329e-13, -6.1134748440525), (-5.3941905513120645, 9.530570777016578e-13, 0.02273284686891065), (-4.11869615060073, 6.230987947830613e-13, 6.150220918729564), (-0.12276845936997698, -7.953360192658464e-14, 11.153528583139945), (-0.12276845936997698, -7.953360192658464e-14, 11.153528583139945), (-2.8812479647109432, 2.5972279882324756e-13, 13.950160972576565), (-2.8812479647109432, 2.5972279882324756e-13, 13.950160972576565), (5.394190551312003, -9.530570777016578e-13, 13.921874422913826), (5.394190551312003, -9.530570777016578e-13, 13.921874422913826), (5.394190551311987, -7.580464034262491e-13, 5.560263804266727), (5.394190551311987, -7.580464034262491e-13, 5.560263804266727), (2.6357110459710196, -4.1879000267641686e-13, 8.356896193703326), (2.6357110459710196, -4.1879000267641686e-13, 8.356896193703326), (-0.30387953798024286, 8.308631560538517e-14, 5.319601684686134), (-1.6957739750624936, 4.110461970796564e-13, 0.010091167040707498), (-0.3038795379802619, 3.309991170041826e-13, -5.308934711281626), (2.635711045970995, -2.874089854998373e-14, -8.366325043590853)])

    def arrow360(self):
        return cmds.curve(d=1, p = [(-0.01286873565133817, -0.0008085438445470087, 10.016073828221842), (0.0045415231518433075, -0.0008085438445470166, 10.016073828221842), (0.01286873565132396, -0.0008085438445470202, 10.016073828221828), (4.001888008136888, -0.0008085438445470124, 6.0096442969330965), (4.001888008136888, -0.0008085438445470135, 6.011858673871515), (3.9990682525462162, -0.0008085438445470112, 6.0096442969330965), (1.998673242492515, -0.0008085438445461228, 6.0096442969330965), (2.0088063113348156, -0.0008085438445461274, 6.009644296933104), (1.998673242492515, -0.0008085438445461193, 6.001902060401562), (1.9986732424925222, -0.0008085438445443544, 2.0272806506615737), (1.998673242492515, -0.0008085438445443436, 2.0032147656443726), (2.026741368089688, -0.0008085438445443561, 2.0032147656443726), (5.976335191382958, -0.0008085438445461101, 2.0032147656443726), (6.005102773781253, -0.0008085438445461228, 2.0032147656443726), (6.00510277378126, -0.0008085438445461343, 2.0290228862946265), (6.019591633325938, -0.0008085438445470188, 4.006429531288731), (6.005102773781253, -0.0008085438445470077, 3.995893020683397), (6.005102773781253, -0.0008085438445470124, 4.006429531288745), (10.011532305069991, -0.0008085438445470124, 7.105427357601002e-15), (9.993232026827783, -0.0008085438445470107, 0.013991619208937323), (9.999918967664208, 0.0071127120043418925, -0.010448691083190909), (6.017206158816393, -0.0071127120043516555, -4.000301182171423), (6.0051027737812674, -0.0008085438445434539, -4.0064295312887275), (6.00510277378126, -0.0008085438445434588, -3.995570844469249), (6.0051027737812674, -0.0008085438445443436, -2.0032147656443584), (6.00510277378126, -0.0008085438445443397, -2.011848741975001), (5.99177627892503, -0.0008085438445443377, -2.0032147656443584), (1.9986732424925293, -0.0008085438445425644, -2.003214765644362), (1.9986732424925293, -0.000808543844542558, -2.0177898738369286), (2.0119371586016896, -0.0008085438445425703, -2.003214765644369), (2.000096968698834, -0.0008085438445407858, -6.0096442969331), (1.9986732424925293, -0.0008085438445407863, -6.007136762604901), (1.9986732424925293, -0.0008085438445407852, -6.0096442969331), (4.001888008136902, -0.0008085438445416721, -6.016046256349334), (4.001888008136902, -0.0008085438445416748, -6.0096442969331), (3.9852702973795218, -0.0008085438445416675, -6.009644296933104), (0.005965589350537925, 0.0011946073651421909, -10.009166974666684), (0.004541523151850413, -0.0008085438445381205, -10.016073828221842), (-0.005965589350516609, 0.001194607365142196, -10.009166974666684), (-4.001888008136888, -0.0008085438445381177, -6.016046256349341), (-4.001888008136888, -0.0008085438445381205, -6.009644296933107), (-3.9852702973795076, -0.0008085438445381278, -6.009644296933104), (-2.00009696869882, -0.0008085438445390095, -6.009644296933104), (-1.9986732424925222, -0.0008085438445390101, -6.009644296933104), (-1.9986732424925222, -0.0008085438445390112, -6.007136762604908), (-1.9986732424925222, -0.0008085438445407829, -2.0177898738369286), (-1.9986732424925222, -0.0008085438445407893, -2.003214765644369), (-2.0119371586016754, -0.0008085438445407834, -2.003214765644369), (-5.991776278925023, -0.0008085438445390161, -2.0032147656443726), (-6.005102773781257, -0.0008085438445390101, -2.0032147656443726), (-6.005102773781257, -0.0008085438445390063, -2.0118487419750117), (-6.005102773781257, -0.0008085438445381254, -3.9955708444692597), (-6.005102773781257, -0.0008085438445381205, -4.006429531288742), (-6.017206158816386, -0.007112712004346313, -4.000301182171434), (-9.999918967664208, 0.007112712004350775, -0.01044869108320512), (-10.011532305069991, -0.0008085438445381205, -7.105427357601002e-15), (-9.993232026827783, -0.0008085438445381347, 0.013991619208916006), (-6.019591633325945, -0.0008085438445416725, 4.006429531288731), (-6.00510277378126, -0.000808543844541679, 4.006429531288731), (-6.00510277378126, -0.0008085438445416742, 3.99589302068339), (-6.00510277378126, -0.0008085438445408008, 2.0290228862946194), (-6.00510277378126, -0.0008085438445407893, 2.0032147656443726), (-5.976335191382958, -0.000808543844540802, 2.0032147656443726), (-2.026741368089688, -0.000808543844542556, 2.0032147656443726), (-1.9986732424925222, -0.0008085438445425686, 2.0032147656443726), (-1.9986732424925222, -0.0008085438445425793, 2.0272806506615737), (-1.9986732424925222, -0.0008085438445443443, 6.001902060401562), (-1.9986732424925222, -0.0008085438445443478, 6.009644296933104), (-2.0088063113348227, -0.0008085438445443432, 6.009644296933104), (-3.9990682525462233, -0.0008085438445434594, 6.009644296933104), (-4.001888008136895, -0.0008085438445434582, 6.009644296933104), (-4.001888008136895, -0.0008085438445434593, 6.011858673871515)])
 
    def arrowBelt(self):
        return cmds.curve(d=1, p = [(1.9999999999999987, 1.4762479884695947, -8.980823116301465), (1.9999999999999996, -0.8695778098722888, -8.980823116301446), (2.000000000000002, -5.561229406556037, -7.0374773950256), (2.000000000000003, -8.476247988469677, 7.920623077296649e-14), (2.000000000000002, -5.561229406555909, 7.037477395025701), (2.0000000000000013, -0.869577809872125, 8.98082311630146), (1.9999999999999996, 1.47624798846976, 8.98082311630144), (3.6666666666666656, 1.47624798846976, 9.000000000000139), (5.333333333333332, 1.47624798846976, 9.000000000000139), (7.0, 1.47624798846976, 9.000000000000139), (4.666666666666666, 3.809581321803093, 9.000000000000115), (2.3333333333333326, 6.142914655136425, 9.000000000000094), (-8.881784197001252e-16, 8.47624798846976, 9.000000000000073), (-2.333333333333334, 6.142914655136425, 9.000000000000094), (-4.666666666666667, 3.8095813218030927, 9.000000000000115), (-7.0, 1.47624798846976, 9.000000000000139), (-5.333333333333334, 1.47624798846976, 9.000000000000139), (-3.666666666666667, 1.47624798846976, 9.000000000000139), (-2.0000000000000004, 1.47624798846976, 9.000000000000139), (-1.999999999999999, -0.8695778098721245, 8.98082311630146), (-1.9999999999999971, -5.561229406555909, 7.037477395025701), (-1.999999999999996, -8.476247988469678, 7.920623077296651e-14), (-1.9999999999999978, -5.561229406556037, -7.0374773950256), (-2.0, -0.8695778098722888, -8.980823116301446), (-2.000000000000001, 1.4762479884695947, -8.980823116301465), (-3.666666666666667, 1.4762479884695978, -9.000000000000163), (-5.333333333333334, 1.4762479884695978, -9.000000000000163), (-7.0, 1.4762479884695978, -9.000000000000163), (-4.666666666666667, 3.809581321802931, -9.000000000000183), (-2.333333333333334, 6.142914655136264, -9.000000000000204), (-8.881784197001252e-16, 8.476247988469597, -9.000000000000226), (2.3333333333333326, 6.142914655136264, -9.000000000000204), (4.666666666666666, 3.8095813218029315, -9.000000000000183), (7.0, 1.4762479884695978, -9.000000000000163), (5.333333333333332, 1.4762479884695978, -9.000000000000163), (3.6666666666666656, 1.4762479884695978, -9.000000000000163), (1.9999999999999991, 1.4762479884695978, -9.000000000000163)])
    
    def arrowBowl(self):
        return cmds.curve(d=1, p = [(5.431172424626894, 1.72981783677632, 0.03445487012004378), (3.620781616417929, 3.5402086449852845, 0.03445487012004378), (3.620781616417929, 3.5402086449852845, 0.03445487012004378), (9.051954041044837, 3.5402086449852845, 0.034454870120050884), (9.051954041044837, 3.5402086449852845, 0.034454870120050884), (9.051954041044837, -1.8909637796416092, 0.034454870120050884), (9.051954041044837, -1.8909637796416092, 0.034454870120050884), (7.2415632328358654, -0.08057297143264464, 0.03445487012004378), (7.2415632328358654, -0.08057297143264464, 0.03445487012004378), (3.982859839365048, -2.7031013420313315, 0.03445487012004378), (0.0, -3.5402086449852845, 0.03445487012004378), (-3.982859839365048, -2.7031013420313315, 0.03445487012004378), (-7.2415632328358726, -0.08057297143264464, 0.034454870120036674), (-7.2415632328358726, -0.08057297143264464, 0.034454870120036674), (-9.051954041044837, -1.8909637796416092, 0.034454870120036674), (-9.051954041044837, -1.8909637796416092, 0.034454870120036674), (-9.051954041044837, 3.5402086449852845, 0.034454870120036674), (-9.051954041044837, 3.5402086449852845, 0.034454870120036674), (-3.6207816164179434, 3.5402086449852845, 0.034454870120036674), (-3.6207816164179434, 3.5402086449852845, 0.034454870120036674), (-5.431172424626908, 1.72981783677632, 0.034454870120036674), (-5.431172424626908, 1.72981783677632, 0.034454870120036674), (-3.4518118829398077, -0.19943621886513085, 0.03445487012004378), (0.0, -1.112936895600967, 0.03445487012004378), (3.4518118829398077, -0.19943621886513085, 0.03445487012004378), (5.431172424626894, 1.72981783677632, 0.03445487012004378), (0.02398843417912211, 1.72981783677632, 5.431172424626901), (0.023988434179115004, 3.5402086449852845, 3.620781616417929), (0.023988434179115004, 3.5402086449852845, 3.620781616417929), (0.023988434179120333, 3.5402086449852845, 9.051954041044837), (0.023988434179120333, 3.5402086449852845, 9.051954041044837), (0.023988434179120333, -1.8909637796416092, 9.051954041044837), (0.023988434179120333, -1.8909637796416092, 9.051954041044837), (0.023988434179120333, -0.08057297143264464, 7.2415632328358726), (0.023988434179120333, -0.08057297143264464, 7.2415632328358726), (0.02398843417912211, -2.7031013420313315, 3.982859839365048), (0.023988434179123885, -3.5402086449852845, 0.0), (0.023988434179118556, -2.7031013420313315, -3.982859839365048), (0.023988434179120333, -0.08057297143264464, -7.2415632328358654), (0.023988434179120333, -0.08057297143264464, -7.2415632328358654), (0.023988434179120333, -1.8909637796416092, -9.051954041044837), (0.023988434179120333, -1.8909637796416092, -9.051954041044837), (0.023988434179120333, 3.5402086449852845, -9.051954041044837), (0.023988434179120333, 3.5402086449852845, -9.051954041044837), (0.023988434179118556, 3.5402086449852845, -3.6207816164179363), (0.023988434179118556, 3.5402086449852845, -3.6207816164179363), (0.023988434179118556, 1.72981783677632, -5.431172424626894), (0.023988434179118556, 1.72981783677632, -5.431172424626894), (0.023988434179118556, -0.19943621886513085, -3.4518118829398077), (0.02398843417911678, -1.112936895600967, 0.0), (0.02398843417912211, -0.19943621886513085, 3.4518118829398077), (0.02398843417912211, 1.72981783677632, 5.431172424626901)])
    
    def arrowCircle(self):
        return cmds.curve(d=1, p = [(0.06928372953943306, -3.308364377174428e-16, 7.356144083036562), (0.06588280413401056, 3.9098346039653993e-16, 7.356180304938359), (-2.0449254293156667, -2.412861561300842e-16, 7.338117172158075), (-5.93456585693254, 1.4471620796125172e-31, 5.588157031332607), (-8.148898037057075, 3.531354270111573e-16, -0.24820511063815232), (-5.5877360893747605, 4.994089102335928e-16, -5.940905659051773), (0.24862605259600862, 3.5313542701115704e-16, -8.155237839176314), (5.941326601009626, -2.682334999006366e-31, -5.594075891493991), (7.450241221778006, -2.40637431777943e-16, -1.6169977244669136), (7.352602910007463, -3.263663634358266e-16, 0.3979661483936777), (7.338484583090179, -3.3494129591370745e-16, 0.6036084343119993), (7.2263070880578075, -2.1649696752208453e-16, 1.7267213281189866), (6.85016316763622, -2.796943144903979e-16, 2.8955321538207475), (6.283027678825339, -3.263663634358265e-16, 3.836030402470404), (6.208133791362101, -3.3220604117710107e-16, 3.954757915489547), (7.371122974463808, -2.929281373055008e-17, 4.37157320778986), (8.522730664988233, -1.8488927466117464e-32, 4.815449950849531), (9.573625802245541, -2.4034627024366755e-32, 5.223583518665076), (9.726202776983126, -4.871183562425053e-16, 5.120581663569621), (10.386163251327053, -4.262472689236549e-16, 3.849863210673885), (10.819860484356377, -3.460255719216136e-16, 2.321821024741947), (10.946353512581332, -2.6434639092689727e-16, 0.8719679958635559), (10.977510120223533, -4.871183562425054e-16, 0.5906946159908), (11.12214528273221, -3.591751540503951e-16, -2.4154504715698266), (8.869941054324832, -4.005271371922037e-31, -8.35163277188038), (0.369582022387289, 5.273029717552794e-16, -12.175968148225275), (-8.345292969761152, 7.457190141359536e-16, -8.869520112366994), (-12.169628346106036, 5.273029717552797e-16, -0.3691610804294484), (-8.863180310247762, 2.1609071387989657e-31, 8.34571391171898), (-3.073116668814729, -3.5917515405039477e-16, 10.95067978810425), (-0.06371346054714078, -4.871183562425052e-16, 10.9870108735209), (0.1005972499121769, -4.939592145745887e-16, 10.985748107685707), (0.10240745635689502, 2.425023182932387e-16, 12.189050594371633), (0.11478592873266316, 1.1486951919153333e-16, 13.282904331900195), (0.1259265538708543, 0.0, 14.267372695675883), (1.8773758191437213, 0.0, 12.567546156187662), (3.6288250844165884, 0.0, 10.86771961669944), (5.380274349689455, 0.0, 9.167893077211215), (3.5994259073837123, 0.0, 7.444226414298993), (1.8185774650779685, 0.0, 5.720559751386774), (0.03772902277222521, 0.0, 3.99689308847455), (0.047113616559486995, 1.3032782013217997e-16, 5.116655493962487), (0.056498210346748776, 2.6065564026435994e-16, 6.236417899450423), (0.06588280413401056, 3.9098346039653993e-16, 7.356180304938359)])

    def arrowHalfCircle(self):
        return cmds.curve(d=1, p = [(-15.000000000000018, 0.0, -9.999999999999979), (-10.000000000000009, 0.0, -4.999999999999986), (-10.000000000000014, 0.0, -7.999999999999986), (-8.58662304448837, 1.3245091611323898e-15, -8.034941035475342), (-7.051176137460898, 9.8422733276073e-16, -7.567434150930907), (-5.636317915862319, 7.084145508198355e-16, -6.809584492903944), (-4.39633281110628, 4.906144862797579e-16, -5.790468782407913), (-3.3787958277731107, 3.22145012973571e-16, -4.549187839612962), (-2.622747214376325, 1.9243131820537103e-16, -3.1333663870358777), (-2.1571945905295387, 8.941163081952389e-17, -1.597325812758605), (-2.0, 0.0, 0.0), (-2.1571945905295316, -8.941163081952389e-17, 1.597325812758605), (-2.6227472143763144, -1.9243131820537103e-16, 3.1333663870358777), (-3.3787958277730965, -3.22145012973571e-16, 4.549187839612962), (-4.396332811106259, -4.906144862797579e-16, 5.79046878240792), (-5.6363179158622945, -7.084145508198355e-16, 6.809584492903959), (-7.0511761374608675, -9.8422733276073e-16, 7.567434150930936), (-8.58662304448834, -1.3245091611323898e-15, 8.034941035475377), (-9.999999999999984, 0.0, 8.000000000000014), (-9.99999999999999, 0.0, 5.000000000000014), (-14.999999999999982, 0.0, 10.000000000000021), (-9.999999999999972, 0.0, 15.000000000000014), (-9.999999999999977, 0.0, 12.000000000000014), (-7.8018940093333615, -4.535903141880344e-16, 11.95721083004392), (-5.5169161476905835, -1.639822312773957e-16, 11.261489684323742), (-3.4113925382974415, 2.968613324812275e-17, 10.133694458634317), (-1.5661066478074162, 1.3702277614398942e-16, 8.61709572358334), (-0.05185729820261287, 1.7094801786714721e-16, 6.769881429566212), (1.0732576999328742, 1.4719878347216292e-16, 4.6629243863946215), (1.7660706093541556, 8.372481771197129e-17, 2.3770630578492913), (2.0, 0.0, 0.0), (1.7660706093541485, -8.372481771197129e-17, -2.3770630578492984), (1.0732576999328565, -1.4719878347216292e-16, -4.6629243863946215), (-0.051857298202637736, -1.7094801786714721e-16, -6.769881429566212), (-1.5661066478074481, -1.3702277614398942e-16, -8.61709572358334), (-3.411392538297477, -2.968613324812275e-17, -10.133694458634317), (-5.5169161476906226, 1.639822312773957e-16, -11.261489684323735), (-7.801894009333406, 4.535903141880344e-16, -11.957210830043891), (-10.000000000000021, 0.0, -11.999999999999986), (-10.000000000000027, 0.0, -14.999999999999993), (-15.000000000000018, 0.0, -9.999999999999979)])

    def arrowMultiBurst(self):
        return cmds.curve(d=1, p = [(1.0048590848299428e-15, 4.525483, 4.5254830000000155), (-0.7999999999999993, 4.525483, 4.5254830000000155), (1.381681435930202e-15, 6.22254, 6.222540000000016), (0.8000000000000013, 4.525483, 4.5254830000000155), (1.0048590848299428e-15, 4.525483, 4.5254830000000155), (-3.1554436208840472e-30, 0.0, 1.4210854715202007e-14), (3.2000000000000024, 3.2, 4.525483000000015), (2.6343150000000017, 3.765685, 4.5254830000000155), (4.400000000000002, 4.4, 6.2225400000000155), (3.765685000000002, 2.634315, 4.525483000000015), (3.2000000000000024, 3.2, 4.525483000000015), (-3.1554436208840472e-30, 0.0, 1.4210854715202007e-14), (4.525483000000002, 0.0, 4.525483000000015), (4.525483000000002, 0.8, 4.525483000000015), (6.222540000000003, 0.0, 6.2225400000000155), (4.525483000000002, -0.8, 4.525483000000015), (4.525483000000002, 0.0, 4.525483000000015), (-3.1554436208840472e-30, 0.0, 1.4210854715202007e-14), (3.2000000000000024, -3.2, 4.525483000000015), (3.765685000000002, -2.634315, 4.525483000000015), (4.400000000000002, -4.4, 6.2225400000000155), (2.6343150000000017, -3.765685, 4.5254830000000155), (3.2000000000000024, -3.2, 4.525483000000015), (-3.1554436208840472e-30, 0.0, 1.4210854715202007e-14), (1.0048590848299428e-15, -4.525483, 4.5254830000000155), (0.8000000000000013, -4.525483, 4.5254830000000155), (1.381681435930202e-15, -6.22254, 6.222540000000016), (-0.7999999999999993, -4.525483, 4.5254830000000155), (1.0048590848299428e-15, -4.525483, 4.5254830000000155), (-3.1554436208840472e-30, 0.0, 1.4210854715202007e-14), (-3.1999999999999997, -3.2, 4.525483000000016), (-2.634314999999999, -3.765685, 4.5254830000000155), (-4.4, -4.4, 6.222540000000017), (-3.7656849999999995, -2.634315, 4.525483000000016), (-3.1999999999999997, -3.2, 4.525483000000016), (-3.1554436208840472e-30, 0.0, 1.4210854715202007e-14), (-4.525483, 0.0, 4.525483000000016), (-4.525483, -0.8, 4.525483000000016), (-6.222540000000001, 0.0, 6.222540000000017), (-4.525483, 0.8, 4.525483000000016), (-4.525483, 0.0, 4.525483000000016), (-3.1554436208840472e-30, 0.0, 1.4210854715202007e-14), (-3.1999999999999997, 3.2, 4.525483000000016), (-3.7656849999999995, 2.634315, 4.525483000000016), (-4.4, 4.4, 6.222540000000017), (-2.634314999999999, 3.765685, 4.5254830000000155), (-3.1999999999999997, 3.2, 4.525483000000016), (-3.1554436208840472e-30, 0.0, 1.4210854715202007e-14), (2.0041733120542015e-15, 0.0, 15.155935818646817), (2.0041733120542015e-15, 1.511371, 15.155935818646817), (3.010948419780045e-15, 0.0, 19.690047818646818), (2.0041733120542015e-15, -1.511371, 15.155935818646817), (2.0041733120542015e-15, 0.0, 15.155935818646817), (-1.5113709999999974, 0.0, 15.155935818646817), (2.0041733120542015e-15, 1.511371, 15.155935818646817), (1.5113710000000036, 0.0, 15.155935818646817), (2.0041733120542015e-15, -1.511371, 15.155935818646817), (-1.5113709999999974, 0.0, 15.155935818646817), (3.010948419780045e-15, 0.0, 19.690047818646818), (1.5113710000000036, 0.0, 15.155935818646817), (2.0041733120542015e-15, 0.0, 15.155935818646817)])

    def arrowStraight(self):
        return cmds.curve(d=1, p = [(-3.7184944570168486, -3.330669073875375e-15, -7.499999999999815), (-7.436988914033723, -3.330669073875375e-15, -7.499999999999815), (7.854611977463811e-15, -6.633355604372291e-15, -14.936988914033549), (7.436988914033744, -3.330669073875375e-15, -7.499999999999808), (3.7184944570168703, -3.330669073875375e-15, -7.499999999999815), (3.718494457016878, 3.3306690738753734e-15, 7.499999999999762), (7.436988914033751, 3.3306690738753718e-15, 7.499999999999762), (2.112132318620839e-14, 6.633355604372286e-15, 14.936988914033485), (-7.436988914033715, 3.330669073875375e-15, 7.499999999999762), (-3.718494457016842, 3.3306690738753734e-15, 7.499999999999758), (-3.7184944570168486, -3.330669073875375e-15, -7.499999999999815)])

    def arrowWheel(self):
        return cmds.curve(d=1, p = [(-9.553447081125084, -3.914493335763492e-05, -1.161771073504024), (-9.553447081125084, -3.914493335775367e-05, -1.1927373197909255), (-9.52558817786935, -3.914493335775367e-05, -1.1927373197909255), (-5.838650740921663, -3.914493335775367e-05, -1.1927373197909255), (-5.829468841888817, -3.914493335775367e-05, -1.1927373197909255), (-5.829468841888817, -3.914493335774903e-05, -1.2031944042844493), (-5.307025382879223, -0.0003933109583375194, -3.0752730192790985), (-3.6668020154110064, 0.0003431733332716919, -4.84347621309611), (-2.40801006026442, -0.000281954134441919, -5.446807872380873), (-2.392601524631667, -0.0002819541344419173, -5.450654763650888), (-2.392601524631683, -0.00028195413444191046, -5.466108151544027), (-1.1970001002919126, -3.914493335563368e-05, -8.353409117564613), (1.1681635557695937, -3.9144933355217465e-05, -9.589010324606711), (1.189890498965985, -3.9144933355217465e-05, -9.589010324606711), (1.1898904989660206, -3.914493335523021e-05, -9.56031425399221), (1.1883425685330948, -0.00012442980905170395, -5.838593621389222), (1.1883425685330948, -0.00012442980905170889, -5.827482006437414), (1.1959475993956818, -0.0001252050793152853, -5.826086803624264), (2.778000136377626, 0.0003695720330166771, -5.427544825544665), (4.704527301298992, -0.0002458782890971118, -3.8858609670264777), (5.459635586479875, 0.0008152359270588762, -2.39893944979217), (5.459635586479875, 0.0008152359270588705, -2.3861941525774633), (5.4733627791552415, 0.0008152359270588705, -2.3861941525774775), (8.350562296739676, -3.914493335775367e-05, -1.1927373197909183), (9.553447081125086, -3.914493335840544e-05, 1.1700046596228475), (9.553447081125086, -3.9144933358416166e-05, 1.1941532794669882), (9.53532685561953, -3.9144933358416166e-05, 1.1941532794669882), (5.83123489777482, -0.0002799944516758227, 1.1918322798052898), (5.8197331664648315, -0.0002799944516758227, 1.1918322798052898), (5.816204302015916, -0.00027999445167582737, 1.2024238420618545), (5.451244110910843, 0.0004801985290068655, 2.81035412030554), (3.7971626449311433, -0.0003501972131191586, 4.731241602443653), (2.4224259602402096, 0.0002199502988649528, 5.450873805308518), (2.3867402442252637, 0.0002199502988649528, 5.450873805308518), (2.3867402442252974, 0.00021995029886494026, 5.479118825839848), (1.189890498965978, -3.914493336040365e-05, 8.354825077240676), (-1.170840991891959, -3.914493336081924e-05, 9.58901032460669), (-1.1970001002919215, -3.914493336081924e-05, 9.589010324606711), (-1.1970001002919215, -3.914493336081033e-05, 9.56893315516318), (-1.196585400190024, -3.9144933359688965e-05, 5.850405530909001), (-1.1965854001900063, -3.9144933359680996e-05, 5.832468344377737), (-1.219669184938164, -3.9144933359680996e-05, 5.832468344377737), (-2.989886647147067, -0.0002369038856528703, 5.3219415501552945), (-4.766493094836731, 0.00010643859007590044, 3.8032270095860525), (-5.4677301220823775, -0.0008152359270588972, 2.391601446787007), (-5.473587655716065, -0.0008130522725695534, 2.3730690336374707), (-5.487513514314079, -0.0008130522725695534, 2.373069033637485), (-8.35767189806561, -3.9144933358416166e-05, 1.194153279466974)])

    def ballArrows(self):
        return cmds.curve(d=1, p = [(-9.40946019425109, 2.8372157662881516, -7.105427357601002e-15), (-7.057092797003655, -0.24318750703476333, -3.1625482105734406), (-7.057092797003655, -0.24318750703476333, -0.9017177091403141), (-4.704725399756224, -1.8644563434104617, -0.9017177091403141), (-0.9278769985046686, -2.8372157662881525, -0.901717709140307), (-0.9278769985046669, -1.8644563434104628, -4.704609641619776), (-0.9278769985046651, -0.24318750703476422, -7.056919159683403), (-3.1626260258897254, -0.24318750703476422, -7.056919159683403), (3.552713678800501e-15, 2.8372157662881508, -9.40922867774703), (3.1626260258897325, -0.24318750703476422, -7.056919159683403), (0.9278769985046722, -0.24318750703476422, -7.056919159683403), (0.9278769985046704, -1.8644563434104628, -4.704609641619776), (0.9278769985046686, -2.8372157662881525, -0.901717709140307), (4.704725399756224, -1.8644563434104617, -0.901717709140307), (7.057092797003657, -0.24318750703476333, -0.901717709140307), (7.0570927970036585, -0.24318750703476333, -3.1625482105734335), (9.409460194251087, 2.8372157662881516, 7.105427357601002e-15), (7.057092797003655, -0.24318750703476333, 3.1625482105734406), (7.057092797003657, -0.24318750703476333, 0.9017177091403141), (4.704725399756224, -1.8644563434104617, 0.9017177091403141), (0.9278769985046686, -2.8372157662881525, 0.901717709140307), (0.9278769985046669, -1.8644563434104608, 4.704609641619776), (0.9278769985046651, -0.24318750703476222, 7.056919159683403), (3.1626260258897254, -0.24318750703476222, 7.056919159683403), (-3.552713678800501e-15, 2.8372157662881525, 9.40922867774703), (-3.1626260258897325, -0.24318750703476222, 7.056919159683403), (-0.9278769985046722, -0.24318750703476222, 7.056919159683403), (-0.9278769985046704, -1.8644563434104608, 4.704609641619776), (-0.9278769985046686, -2.8372157662881525, 0.901717709140307), (-4.704725399756224, -1.8644563434104617, 0.901717709140307), (-7.057092797003655, -0.24318750703476333, 0.901717709140307), (-7.0570927970036585, -0.24318750703476333, 3.1625482105734335), (-9.40946019425109, 2.8372157662881516, -7.105427357601002e-15)])

    def circle(self):
        return cmds.curve(d=1, p = [(1.4486862124762916, 4.459574224693032e-16, -7.283037407680265), (3.0110544696265197e-16, 4.546942448870747e-16, -7.425720545771247), (-1.4486862124762903, 4.459574224693043e-16, -7.283037407680278), (-2.8417002262397055, 4.200827064018426e-16, -6.860471226386594), (-4.1255092939525735, 3.780644475124541e-16, -6.174260983259462), (-5.2507773531111175, 3.2151738392614675e-16, -5.250777353111119), (-6.174260983259459, 2.52614587584584e-16, -4.1255092939525735), (-6.860471226386594, 1.7400395431003846e-16, -2.8417002262397055), (-7.2830374076802755, 8.870644665389939e-17, -1.4486862124762903), (-7.42572054577124, -1.2973162367614002e-31, -8.517402861360319e-16), (-7.283037407680278, -8.870644665389953e-17, 1.4486862124762894), (-6.860471226386594, -1.7400395431003814e-16, 2.841700226239701), (-6.17426098325946, -2.52614587584584e-16, 4.1255092939525735), (-5.250777353111113, -3.215173839261466e-16, 5.2507773531111095), (-4.1255092939525735, -3.780644475124541e-16, 6.174260983259459), (-2.8417002262397046, -4.200827064018426e-16, 6.860471226386594), (-1.4486862124762903, -4.459574224693044e-16, 7.2830374076802755), (-9.010888955803078e-16, -4.546942448870747e-16, 7.425720545771241), (1.4486862124762894, -4.459574224693044e-16, 7.2830374076802755), (2.841700226239701, -4.200827064018426e-16, 6.860471226386592), (4.125509293952572, -3.780644475124541e-16, 6.17426098325946), (5.2507773531111095, -3.2151738392614665e-16, 5.250777353111109), (6.174260983259458, -2.5261458758458373e-16, 4.125509293952572), (6.86047122638658, -1.7400395431003838e-16, 2.8417002262397046), (7.2830374076802755, -8.870644665389992e-17, 1.4486862124762903), (7.425720545771235, -3.0310546862875546e-31, 1.979669473368916e-15), (7.2830374076802755, 8.870644665389928e-17, -1.4486862124762876), (6.86047122638658, 1.7400395431003811e-16, -2.8417002262397015), (6.174260983259451, 2.5261458758458363e-16, -4.125509293952572), (5.250777353111109, 3.2151738392614645e-16, -5.250777353111108), (4.125509293952572, 3.780644475124537e-16, -6.174260983259449), (2.8417002262397046, 4.2008270640184253e-16, -6.86047122638658)])

    def cone(self):
        return cmds.curve(d=1, p = [(7.841389058239869, 0.0, -4.521563195608586), (7.841389058239862, 0.0, 4.53289719322531), (-7.105427357601002e-15, 18.10892077766779, 0.005666998808358414), (7.841389058239869, 0.0, -4.521563195608586), (0.0, 0.0, -9.048793390025537), (-7.105427357601002e-15, 18.10892077766779, 0.005666998808358414), (-7.841389058239876, 0.0, -4.521563195608593), (0.0, 0.0, -9.048793390025537), (-7.105427357601002e-15, 18.10892077766779, 0.005666998808358414), (-7.8413981127002685, 0.0, 4.532897193225303), (-7.841389058239876, 0.0, -4.521563195608593), (-7.105427357601002e-15, 18.10892077766779, 0.005666998808358414), (-1.4383010409346753e-06, 0.0, 9.060127387642254), (-7.8413981127002685, 0.0, 4.532897193225303), (-7.105427357601002e-15, 18.10892077766779, 0.005666998808358414), (7.841389058239862, 0.0, 4.53289719322531), (-1.4383010409346753e-06, 0.0, 9.060127387642254)])

    def cross(self):
        return cmds.curve(d=1, p = [(4.27772141031398, 0.0, -4.277721410313973), (8.555442820627952, -1.8996899210650276e-15, -4.277721410313973), (8.555442820627952, -5.699069763195089e-15, 4.27772141031398), (4.27772141031398, -3.7993798421300584e-15, 4.277721410313973), (4.27772141031398, -5.699069763195089e-15, 8.555442820627952), (-4.277721410313973, -1.8996899210650276e-15, 8.555442820627952), (-4.277721410313973, 0.0, 4.277721410313973), (-8.555442820627945, 1.8996899210650292e-15, 4.277721410313966), (-8.555442820627945, 5.6990697631950876e-15, -4.27772141031398), (-4.277721410313966, 3.7993798421300584e-15, -4.27772141031398), (-4.277721410313966, 5.6990697631950876e-15, -8.555442820627956), (4.27772141031398, 1.8996899210650292e-15, -8.555442820627949), (4.27772141031398, 0.0, -4.277721410313973)])

    def cube(self):
        return cmds.curve(d=1, p = [(5.331895148154388, 5.331895148154395, 5.331895148154395), (5.331895148154402, 5.331895148154395, -5.331895148154391), (-5.331895148154395, 5.331895148154395, -5.331895148154398), (-5.331895148154395, 5.331895148154395, 5.331895148154395), (5.331895148154388, 5.331895148154395, 5.331895148154395), (5.331895148154388, -5.331895148154395, 5.331895148154395), (-5.331895148154395, -5.331895148154395, 5.331895148154395), (-5.331895148154395, -5.331895148154395, -5.331895148154398), (5.331895148154402, -5.331895148154395, -5.331895148154391), (5.331895148154388, -5.331895148154395, 5.331895148154395), (5.331895148154402, -5.331895148154395, -5.331895148154391), (5.331895148154402, 5.331895148154395, -5.331895148154391), (-5.331895148154395, 5.331895148154395, -5.331895148154398), (-5.331895148154395, -5.331895148154395, -5.331895148154398), (-5.331895148154395, -5.331895148154395, 5.331895148154395), (-5.331895148154395, 5.331895148154395, 5.331895148154395)])

    def eightArrow(self):
        return cmds.curve(d=1, p = [(-5.329070518200751e-15, 0.0, 10.498311009926782), (2.0540173715074115, 0.0, 7.759621181250232), (0.6846724571691336, 0.0, 7.759621181250231), (0.8730666538484613, 0.0, 2.107773150043619), (5.002745345569915, 0.0, 5.9710188167352864), (4.034471874404554, 0.0, 6.939292287900649), (7.423426257129963, 0.0, 7.423426257129969), (6.939292287900644, 0.0, 4.03447187440456), (5.971018816735283, 0.0, 5.002745345569924), (2.1077731500436183, 0.0, 0.8730666538484626), (7.7596211812502265, 0.0, 0.6846724571691414), (7.7596211812502265, 0.0, 2.0540173715074177), (10.498311009926782, 0.0, 4.6629367034256575e-15), (7.759621181250234, 0.0, -2.0540173715074106), (7.7596211812502265, 0.0, -0.6846724571691345), (2.1077731500436183, 0.0, -0.8730666538484608), (5.971018816735283, 0.0, -5.0027453455699185), (6.939292287900651, 0.0, -4.034471874404555), (7.42342625712997, 0.0, -7.423426257129962), (4.034471874404561, 0.0, -6.939292287900646), (5.002745345569922, 0.0, -5.971018816735281), (0.873066653848463, 0.0, -2.1077731500436183), (0.6846724571691407, 0.0, -7.759621181250231), (2.0540173715074186, 0.0, -7.75962118125023), (5.329070518200751e-15, 0.0, -10.498311009926782), (-2.0540173715074115, 0.0, -7.759621181250232), (-0.6846724571691336, 0.0, -7.759621181250231), (-0.8730666538484613, 0.0, -2.107773150043619), (-5.002745345569918, 0.0, -5.9710188167352864), (-4.034471874404554, 0.0, -6.939292287900649), (-7.423426257129961, 0.0, -7.423426257129969), (-6.939292287900645, 0.0, -4.03447187440456), (-5.97101881673528, 0.0, -5.002745345569924), (-2.1077731500436183, 0.0, -0.8730666538484626), (-7.75962118125023, 0.0, -0.6846724571691414), (-7.759621181250228, 0.0, -2.0540173715074177), (-10.49831100992678, 0.0, -4.6351811278100286e-15), (-7.75962118125023, 0.0, 2.0540173715074106), (-7.75962118125023, 0.0, 0.6846724571691345), (-2.1077731500436183, 0.0, 0.8730666538484608), (-5.971018816735286, 0.0, 5.0027453455699185), (-6.939292287900648, 0.0, 4.034471874404555), (-7.423426257129968, 0.0, 7.423426257129962), (-4.034471874404559, 0.0, 6.939292287900646), (-5.002745345569923, 0.0, 5.971018816735281), (-0.873066653848463, 0.0, 2.1077731500436183), (-0.6846724571691407, 0.0, 7.759621181250231), (-2.0540173715074186, 0.0, 7.75962118125023), (-5.329070518200751e-15, 0.0, 10.498311009926782)])

    def cylinder(self):
        return cmds.curve(d=1, p = [(6.000046, 0.0, 3.86931e-07), (5.790349, 0.0, -1.551257), (5.191298, 0.0, -2.99749), (4.242674, 0.0, -4.242676), (2.997491, 0.0, -5.191294), (1.551256, 0.0, -5.790355), (0.0, 0.0, -6.0), (0.0, 6.0, -6.0), (1.551256, 6.0, -5.790355), (2.997491, 6.0, -5.191294), (4.242674, 6.0, -4.242676), (5.191298, 6.0, -2.99749), (5.790349, 6.0, -1.551257), (6.000046, 6.0, 3.86931e-07), (6.000046, 0.0, 3.86931e-07), (5.790349, 0.0, 1.551256), (5.191298, 0.0, 2.997491), (4.242674, 0.0, 4.242673), (2.997491, 0.0, 5.191298), (1.551256, 0.0, 5.790349), (0.0, 0.0, 6.000046), (-1.551256, 0.0, 5.790349), (-2.997491, 0.0, 5.191298), (-4.242674, 0.0, 4.242673), (-5.191298, 0.0, 2.997491), (-5.790349, 0.0, 1.551256), (-6.000046, 0.0, 3.86931e-07), (-6.000046, 6.0, 3.86931e-07), (-5.790349, 6.0, -1.551257), (-5.191298, 6.0, -2.99749), (-4.242674, 6.0, -4.242676), (-2.997491, 6.0, -5.191294), (-1.551256, 6.0, -5.790355), (0.0, 6.0, -6.0), (0.0, 0.0, -6.0), (-1.551256, 0.0, -5.790355), (-2.997491, 0.0, -5.191294), (-4.242674, 0.0, -4.242676), (-5.191298, 0.0, -2.99749), (-5.790349, 0.0, -1.551257), (-6.000046, 0.0, 3.86931e-07), (-6.000046, 6.0, 3.86931e-07), (-5.790349, 6.0, 1.551256), (-5.191298, 6.0, 2.997491), (-4.242674, 6.0, 4.242673), (-2.997491, 6.0, 5.191298), (-1.551256, 6.0, 5.790349), (0.0, 6.0, 6.000046), (0.0, 0.0, 6.000046), (0.0, 6.0, 6.000046), (1.551256, 6.0, 5.790349), (2.997491, 6.0, 5.191298), (4.242674, 6.0, 4.242673), (5.191298, 6.0, 2.997491), (5.790349, 6.0, 1.551256), (6.000046, 6.0, 3.86931e-07)])

    def dumbell(self):
        return cmds.curve(d=1, p = [(-1.2096642821208666e-14, 6.693010221213503e-16, -12.399765330648394), (-2.082102411636804, -5.148469400933439e-16, -11.537332168552052), (-2.944535573733144, -1.1326632682053584e-15, -9.45522975691526), (-2.082102411636809, -7.207857161306821e-16, -7.373127345278468), (-0.02490065633289719, 3.603928580653431e-16, -6.52100390843419), (-3.698460986977696e-15, -3.603928580653404e-16, 6.51125895896774), (-2.0821024116367957, -1.5445408202800345e-15, 7.373127345278354), (-2.944535573733129, -2.162357148392049e-15, 9.455229756915145), (-2.0821024116367943, -1.8019642903267074e-15, 11.537332168551945), (5.5066019880137946e-15, -6.693010221213476e-16, 12.399765330648279), (2.0821024116367974, 5.148469400933466e-16, 11.537332168551938), (2.944535573733131, 1.1326632682053611e-15, 9.455229756915145), (2.082102411636789, 7.207857161306848e-16, 7.373127345278354), (-3.698460986977696e-15, -3.603928580653404e-16, 6.51125895896774), (-0.02490065633289719, 3.603928580653431e-16, -6.52100390843419), (2.082102411636789, 1.5445408202800374e-15, -7.373127345278467), (2.944535573733116, 2.162357148392052e-15, -9.455229756915267), (2.0821024116367877, 1.80196429032671e-15, -11.537332168552059), (-1.2096642821208666e-14, 6.693010221213503e-16, -12.399765330648394)])

    def eye(self):
        return cmds.curve(d=1, p = [(-7.539174, -0.002368161000000013, 5.2313528509095875e-17), (-7.395558, 0.22192260000000003, 5.1316992322192336e-17), (-6.458991, 0.576681, 4.4818253275291654e-17), (-5.48079, 1.174662, 3.80306203195957e-17), (-4.523832, 1.8837840000000001, 3.139039028710044e-17), (-3.554865, 2.547924, 2.466683107771317e-17), (-2.4976770000000004, 3.0652169999999996, 1.7331115709229297e-17), (-1.349157, 3.4141529999999998, 9.361657282713764e-18), (0.0, 3.5744880000000006, 0.0), (0.742326, 3.462051, -5.1509213561118375e-18), (1.4343599999999999, 3.175395, -9.952871860008371e-18), (2.0302230000000003, 2.72145, -1.4087501998272247e-17), (2.484168, 2.12559, -1.723737819148141e-17), (2.7708180000000002, 1.433556, -1.922641212903642e-17), (2.871168, 0.691227, -1.992273013229351e-17), (2.7708180000000002, -0.05109779999999999, -1.922641212903642e-17), (2.484168, -0.7431329999999999, -1.723737819148141e-17), (2.0302230000000003, -1.3389929999999999, -1.4087501998272247e-17), (1.4343599999999999, -1.7929410000000001, -9.952871860008371e-18), (0.742326, -2.0795909999999997, -5.1509213561118375e-18), (0.0, -2.179938, 0.0), (-0.742326, -2.0795909999999997, 5.1509213561118375e-18), (-1.4343599999999999, -1.7929410000000001, 9.952871860008371e-18), (-2.0302230000000003, -1.3389929999999999, 1.4087501998272247e-17), (-2.484168, -0.7431329999999999, 1.723737819148141e-17), (-2.7708180000000002, -0.051097800000000006, 1.922641212903642e-17), (-2.871168, 0.691227, 1.992273013229351e-17), (-2.7708180000000002, 1.433556, 1.922641212903642e-17), (-2.484168, 2.12559, 1.723737819148141e-17), (-2.0302230000000003, 2.72145, 1.4087501998272247e-17), (-1.4343599999999999, 3.175395, 9.952871860008371e-18), (-0.742326, 3.462051, 5.1509213561118375e-18), (0.0, 3.5744880000000006, 0.0), (1.356735, 3.4027860000000003, -9.414240220717574e-18), (2.535567, 3.012171, -1.759403039924834e-17), (3.5851770000000003, 2.521401, -2.4877162829728407e-17), (4.474575, 1.9709310000000002, -3.1048601190075685e-17), (5.32923, 1.37169, -3.697896155951952e-17), (6.280905, 0.792657, -4.358253341552043e-17), (7.357668, 0.2673912, -5.105407763217329e-17), (7.534910999999999, 0.0018945150000000128, -5.228394800438351e-17), (7.376612999999999, -0.2522352, -5.1185534977182805e-17), (6.371841, -0.7282409999999999, -4.421352867156614e-17), (5.408799, -1.3413780000000002, -3.7531082408559514e-17), (4.489731, -1.967142, -3.1153767066083304e-17), (3.5851770000000003, -2.521401, -2.4877162829728407e-17), (2.535567, -3.012171, -1.759403039924834e-17), (1.356735, -3.4027890000000003, -9.414240220717574e-18), (0.0, -3.5744670000000003, 0.0), (-1.356735, -3.4027890000000003, 9.414240220717574e-18), (-2.535567, -3.012171, 1.759403039924834e-17), (-3.600333, -2.502456, 2.4982328705736023e-17), (-4.561725, -1.868628, 3.16533257938012e-17), (-5.4656340000000005, -1.2201300000000002, 3.7925454443588084e-17), (-6.3680520000000005, -0.6600389999999999, 4.4187237202564237e-17), (-7.372824, -0.24086789999999997, 5.1159243508180904e-17), (-7.539174, -0.002368161000000013, 5.2313528509095875e-17)])

    def foot(self):
        return cmds.curve(d=1, p = [(-7.105427357601002e-15, 5.9762450000000005, 2.775575), (-7.105427357601002e-15, 5.901965000000001, 4.160245), (-7.105427357601002e-15, 5.667835, 5.527035), (-7.105427357601002e-15, 5.24366, 6.84673), (-7.105427357601002e-15, 4.589615, 8.068835), (-7.105427357601002e-15, 3.6922349999999997, 9.125015), (-7.105427357601002e-15, 2.602775, 9.98158), (-7.105427357601002e-15, 1.35967, 10.59321), (-8.371100007105428e-06, 0.0, 10.914625000000001), (-0.6708000000000072, 0.0, 10.8171), (-1.3338950000000072, 0.0, 10.477644999999999), (-1.9773600000000071, 0.0, 9.99035), (-2.5949650000000073, 0.0, 9.29316), (-3.182480000000007, 0.0, 8.39634), (-3.688160000000007, 0.0, 7.26012), (-4.097370000000007, 0.0, 5.832224999999999), (-4.230720000000007, 0.0, 4.106935), (-4.123010000000007, 0.0, 2.78064), (-3.7460300000000073, 0.0, 0.8360650000000001), (-3.3682800000000075, 0.0, -0.636185), (-2.9890400000000072, 0.0, -2.097935), (-2.725270000000007, 0.0, -3.73052), (-2.724455000000007, 0.0, -5.486085000000001), (-2.859520000000007, 0.0, -7.24147), (-2.561395000000007, 0.0, -8.767175), (-1.966355000000007, 0.0, -9.6153), (-1.3341950000000071, 0.0, -10.178735000000001), (-0.6698250000000071, 0.0, -10.488655), (-7.105427357601002e-15, 0.0, -10.600639999999999), (0.6698249999999929, 0.0, -10.488655), (1.334194999999993, 0.0, -10.178735000000001), (1.9663549999999927, 0.0, -9.6153), (2.561394999999993, 0.0, -8.767175), (2.8595199999999927, 0.0, -7.24147), (2.7244549999999927, 0.0, -5.486085000000001), (2.725269999999993, 0.0, -3.73052), (2.989034999999993, 0.0, -2.09793), (3.3682799999999933, 0.0, -0.636185), (3.746034999999993, 0.0, 0.83607), (4.123009999999993, 0.0, 2.78064), (3.9685949999999925, 1.545075, 2.775575), (3.558024999999993, 2.9856100000000003, 2.775575), (2.907849999999993, 4.225825, 2.775575), (2.054404999999993, 5.17073, 2.775575), (1.063219999999993, 5.767365, 2.775575), (-7.105427357601002e-15, 5.9762450000000005, 2.775575), (-1.0632200000000072, 5.767365, 2.775575), (-2.054405000000007, 5.17073, 2.775575), (-2.9078500000000074, 4.225825, 2.775575), (-3.5580250000000073, 2.9856100000000003, 2.775575), (-3.9685950000000068, 1.545075, 2.775575), (-4.112285000000007, 0.0, 2.775575), (-4.230720000000007, 0.0, 4.106935), (-4.097370000000007, 0.0, 5.832224999999999), (-3.688160000000007, 0.0, 7.26012), (-3.182480000000007, 0.0, 8.39634), (-2.5949650000000073, 0.0, 9.29316), (-1.9773600000000071, 0.0, 9.99035), (-1.3338950000000072, 0.0, 10.477644999999999), (-0.6708000000000072, 0.0, 10.8171), (-8.371100007105428e-06, 0.0, 10.914625000000001), (0.6714649999999929, 0.0, 10.817245), (1.332979999999993, 0.0, 10.47725), (1.977519999999993, 0.0, 9.9905), (2.595039999999993, 0.0, 9.293205), (3.182429999999993, 0.0, 8.396335), (3.688154999999993, 0.0, 7.260145), (4.097369999999993, 0.0, 5.832235), (4.230719999999993, 0.0, 4.106949999999999), (4.123009999999993, 0.0, 2.78064)])

    def hand(self):
        return cmds.curve(d=1, p = [(2.1594739999999963, -1.0548990125869294e-14, 2.6946800000000035), (3.048637999999996, -1.4892539645927628e-14, 2.884480000000005), (4.811529999999996, -2.350423411456859e-14, 3.328656000000007), (6.677949999999995, -3.262166092810048e-14, 3.9000100000000097), (7.534979999999995, -3.6808236458796276e-14, 4.0523700000000105), (8.315827999999994, -4.062266434345929e-14, 4.014280000000012), (8.963361999999995, -4.3785855829980845e-14, 3.823830000000013), (9.439489999999994, -4.6111732210363236e-14, 3.423882000000013), (9.647393999999997, -4.7127339364294587e-14, 2.9094840000000137), (9.496625999999996, -4.639084050239717e-14, 2.357356000000013), (9.210947999999998, -4.499530881219016e-14, 1.9574080000000131), (8.611621999999999, -4.206761250458158e-14, 1.5245640000000125), (7.748375999999999, -3.7850671930073075e-14, 1.251836000000011), (6.837617999999998, -3.340163612364222e-14, 1.16564200000001), (5.008763999999998, -2.446771851793983e-14, 1.0748080000000075), (4.148389999999999, -2.0264807609748913e-14, 0.9958820000000065), (3.7069139999999985, -1.8108205601663483e-14, 0.8718380000000058), (3.3439579999999993, -1.6335172325909753e-14, 0.5593600000000053), (3.4974179999999997, -1.708482155748925e-14, 0.22430400000000555), (3.87636, -1.8935946144438277e-14, -0.03622899999999395), (4.786096, -2.3379989499971998e-14, -0.12627979999999273), (6.598828, -3.223515143702116e-14, -0.06196819999999032), (8.413928, -4.1101881009808493e-14, -0.0176832799999879), (9.294458, -4.5403253601250523e-14, -0.23750199999998672), (9.820392, -4.7972431360676635e-14, -0.518453999999986), (10.220340000000002, -4.992616986498888e-14, -1.0326719999999856), (10.366464000000002, -5.0639982873690314e-14, -1.5677359999999854), (10.220340000000002, -4.992616986498888e-14, -1.9658819999999855), (9.893282000000003, -4.8328497648242315e-14, -2.323095999999986), (9.515670000000004, -4.64838700864334e-14, -2.5372359999999863), (9.068250000000004, -4.429823174945114e-14, -2.678691999999987), (8.160356000000004, -3.986318652948739e-14, -2.7331319999999883), (6.377406000000003, -3.115350910576353e-14, -2.3738199999999905), (4.606418000000002, -2.2502265828450162e-14, -1.9244719999999929), (3.7456260000000023, -1.8297312998072358e-14, -1.7426699999999942), (3.2879220000000022, -1.6061437513315013e-14, -1.7754319999999946), (2.9096520000000026, -1.4213595633805198e-14, -1.9458079999999953), (3.040336000000003, -1.48519845311057e-14, -2.346783999999995), (3.3796180000000033, -1.6509370759365538e-14, -2.6670899999999946), (5.020158000000005, -2.4523377994967178e-14, -3.4060719999999924), (5.902390000000004, -2.883306482459602e-14, -3.6080479999999913), (6.726138000000005, -3.285705840738728e-14, -3.98744399999999), (7.192168000000005, -3.513360624651795e-14, -4.327475999999989), (7.439754000000006, -3.634305922872727e-14, -4.879783999999989), (7.4116600000000075, -3.620582056385047e-14, -5.493395999999989), (7.077898000000008, -3.457539943241273e-14, -5.77490399999999), (6.620694000000008, -3.2341966438309557e-14, -5.9236119999999906), (5.736082000000008, -2.8020653353166836e-14, -5.846157999999991), (4.901918000000007, -2.3945777805067792e-14, -5.469289999999993), (3.288398000000006, -1.606376276441779e-14, -4.639709999999995), (1.5278120000000055, -7.463333062673882e-15, -4.197317999999997), (-1.177291999999995, 5.751049414470799e-15, -3.848652000000001), (-2.9212559999999956, 1.42702809569073e-14, -3.3518780000000032), (-3.687997999999996, 1.8015801295234722e-14, -2.866318000000004), (-4.310625999999997, 2.1057327437290495e-14, -2.205540000000005), (-4.772059999999998, 2.3311423902327988e-14, -1.4236220000000055), (-5.064785999999999, 2.474138494079625e-14, -0.5639140000000059), (-5.170248000000001, 2.5256564839537533e-14, 0.337647999999994), (-5.048066000000002, 2.465970805332063e-14, 1.2367859999999942), (-4.6946220000000025, 2.2933140719771927e-14, 2.0725799999999945), (-4.159212000000004, 2.0317672877467887e-14, 2.8062199999999957), (-2.780734000000005, 1.3583833613495244e-14, 3.9859279999999973), (-1.1662960000000064, 5.697334160004175e-15, 4.816773999999999), (-0.31335600000000685, 1.5307382028595386e-15, 5.123566000000001), (0.46972999999999254, -2.294622269971569e-15, 5.579912000000002), (0.9717959999999916, -4.7472052955299656e-15, 6.332988000000002), (1.4034919999999904, -6.856032186419725e-15, 7.133216000000003), (2.0644179999999897, -1.0084643342622712e-14, 7.745942000000004), (2.5451619999999893, -1.2433068796724456e-14, 7.975662000000004), (3.0784259999999892, -1.5038053469140776e-14, 8.051842000000004), (3.4974179999999895, -1.708482155748925e-14, 7.937572000000006), (3.9164099999999897, -1.913158964583772e-14, 7.613804000000006), (4.08781599999999, -1.9968904751976878e-14, 7.042452000000006), (4.068769999999991, -1.9875865397978032e-14, 6.547278000000007), (3.950991999999992, -1.9300522069443105e-14, 6.047490000000006), (3.459259999999993, -1.6898420440725203e-14, 5.288874000000005), (2.799785999999994, -1.3676902277381942e-14, 4.649670000000005), (2.0997519999999947, -1.0257249272171976e-14, 4.0980640000000035), (1.688131999999995, -8.246493266028664e-15, 3.747648000000003), (1.5930379999999955, -7.781960853492364e-15, 3.378468000000003), (1.802403999999996, -8.804709850096514e-15, 2.9477540000000033), (2.1594739999999963, -1.0548990125869294e-14, 2.6946800000000035)])

    def hitachi(self):
        return cmds.curve(d=1, p = [(0.2228001680243396, 4.4386558345533625e-16, -7.24887508405481), (-3.0420364107711532e-15, 4.493984237860712e-16, -9.154843265115746), (-0.22280016802433883, 4.438655834553355e-16, -7.248875084054797), (-2.3141245227017717, 4.274032993545142e-16, -7.122142946492787), (-5.411653616836298, 3.201043334963743e-16, -5.411653616836302), (-7.122142946492784, 1.3887175019521093e-16, -2.3141245227017757), (-7.248875084054796, 7.030140201489738e-17, -0.2577286266466727), (-9.484064443525686, 3.2833183433108393e-31, -7.380187729334254e-15), (-7.248875084054797, -7.030140201489671e-17, 0.257728626646667), (-7.122142946492787, -1.3887175019521034e-16, 2.314124522701767), (-5.411653616836302, -3.201043334963736e-16, 5.411653616836292), (-2.3141245227017744, -4.274032993545139e-16, 7.122142946492785), (-0.22280016802434038, -4.4386558345533517e-16, 7.248875084054792), (-3.762575863679131e-15, -4.493984237860712e-16, 10.758569383785924), (0.22280016802433783, -4.4386558345533527e-16, 7.248875084054795), (2.314124522701769, -4.27403299354514e-16, 7.122142946492787), (5.411653616836294, -3.201043334963739e-16, 5.411653616836297), (7.122142946492787, -1.3887175019521054e-16, 2.314124522701771), (7.248875084054798, -7.030140201489687e-17, 0.257728626646666), (9.484064443525686, 2.018479942658369e-31, -4.450385738340977e-15), (7.2488750840547995, 7.030140201489729e-17, -0.2577286266466727), (7.122142946492788, 1.3887175019521096e-16, -2.3141245227017775), (5.411653616836302, 3.20104333496374e-16, -5.411653616836297), (2.3141245227017744, 4.2740329935451476e-16, -7.122142946492798)])

    def jack(self):
        return cmds.curve(d=1, p = [(0.0, 0.0, 0.0), (0.0, 0.0, -5.2913072417607445), (0.0, 1.7637690805869148, -7.055076322347659), (7.105427357601002e-15, 0.0, -8.818845402934574), (0.0, -1.7637690805869148, -7.055076322347659), (0.0, 0.0, -5.2913072417607445), (1.7637690805869184, 0.0, -7.055076322347659), (7.105427357601002e-15, 0.0, -8.818845402934574), (-1.7637690805869113, 0.0, -7.055076322347659), (0.0, 1.7637690805869148, -7.055076322347659), (1.7637690805869184, 0.0, -7.055076322347659), (0.0, -1.7637690805869148, -7.055076322347659), (-1.7637690805869113, 0.0, -7.055076322347659), (0.0, 0.0, -5.2913072417607445), (0.0, 0.0, 0.0), (0.0, 0.0, 5.291307241760748), (0.0, 1.7637690805869148, 7.055076322347659), (-7.105427357601002e-15, 0.0, 8.81884540293457), (0.0, -1.7637690805869148, 7.055076322347659), (0.0, 0.0, 5.291307241760748), (1.7637690805869113, 0.0, 7.055076322347659), (-7.105427357601002e-15, 0.0, 8.81884540293457), (-1.7637690805869184, 0.0, 7.055076322347659), (0.0, 1.7637690805869148, 7.055076322347659), (1.7637690805869113, 0.0, 7.055076322347659), (0.0, -1.7637690805869148, 7.055076322347659), (-1.7637690805869184, 0.0, 7.055076322347659), (0.0, 0.0, 5.291307241760748), (0.0, 0.0, 0.0), (0.0, 5.2913072417607445, 0.0), (-1.7637690805869113, 7.055076322347659, 0.0), (0.0, 8.818845402934574, 0.0), (1.7637690805869113, 7.055076322347659, 0.0), (0.0, 5.2913072417607445, 0.0), (0.0, 7.055076322347659, 1.7637690805869113), (0.0, 8.818845402934574, 0.0), (0.0, 7.055076322347659, -1.7637690805869148), (1.7637690805869113, 7.055076322347659, 0.0), (0.0, 7.055076322347659, 1.7637690805869113), (-1.7637690805869113, 7.055076322347659, 0.0), (0.0, 7.055076322347659, -1.7637690805869148), (0.0, 5.2913072417607445, 0.0), (0.0, 0.0, 0.0), (0.0, -5.2913072417607445, 0.0), (-1.7637690805869113, -7.055076322347659, 0.0), (0.0, -8.818845402934574, 0.0), (1.7637690805869113, -7.055076322347659, 0.0), (0.0, -5.2913072417607445, 0.0), (0.0, -7.055076322347659, 1.7637690805869113), (0.0, -8.818845402934574, 0.0), (0.0, -7.055076322347659, -1.7637690805869148), (-1.7637690805869113, -7.055076322347659, 0.0), (0.0, -7.055076322347659, 1.7637690805869113), (1.7637690805869113, -7.055076322347659, 0.0), (0.0, -7.055076322347659, -1.7637690805869148), (0.0, -5.2913072417607445, 0.0), (0.0, 0.0, 0.0), (-5.291307241760748, 0.0, 0.0), (-7.055076322347659, 1.7637690805869148, 0.0), (-8.81884540293457, 0.0, -7.105427357601002e-15), (-7.055076322347659, -1.7637690805869148, 0.0), (-5.291307241760748, 0.0, 0.0), (-7.055076322347659, 0.0, 1.7637690805869113), (-8.81884540293457, 0.0, -7.105427357601002e-15), (-7.055076322347659, 0.0, -1.7637690805869184), (-7.055076322347659, 1.7637690805869148, 0.0), (-7.055076322347659, 0.0, 1.7637690805869113), (-7.055076322347659, -1.7637690805869148, 0.0), (-7.055076322347659, 0.0, -1.7637690805869184), (-5.291307241760748, 0.0, 0.0), (0.0, 0.0, 0.0), (5.2913072417607445, 0.0, 0.0), (7.055076322347659, 1.7637690805869148, 0.0), (8.818845402934574, 0.0, 7.105427357601002e-15), (7.055076322347659, -1.7637690805869148, 0.0), (5.2913072417607445, 0.0, 0.0), (7.055076322347659, 0.0, 1.7637690805869184), (8.818845402934574, 0.0, 7.105427357601002e-15), (7.055076322347659, 0.0, -1.7637690805869113), (7.055076322347659, 1.7637690805869148, 0.0), (7.055076322347659, 0.0, 1.7637690805869184), (7.055076322347659, -1.7637690805869148, 0.0), (7.055076322347659, 0.0, -1.7637690805869113), (5.2913072417607445, 0.0, 0.0)])

    def key(self):
        return cmds.curve(d=1, p = [(0.5018120000000034, -1.936380167322227e-15, 8.720681000000003), (-0.5458379999999967, -1.936380167322227e-15, 8.720681000000003), (-0.5458379999999963, -1.6403576275081378e-15, 7.387514000000002), (-2.2604669999999962, -1.6403576275081378e-15, 7.387514), (-2.2604669999999953, -1.269411464832615e-15, 5.716920999999999), (-0.5458379999999954, -1.269411464832615e-15, 5.716921000000001), (-0.5458379999999954, -1.2358549739133195e-15, 5.565796000000001), (-2.2604669999999953, -1.2358549739133195e-15, 5.565795999999999), (-2.2604669999999945, -8.649090332824017e-16, 3.895204), (-0.5458379999999947, -8.649090332824017e-16, 3.895204000000001), (-0.5374169999999907, 1.094088597497489e-15, -4.9273370000000005), (-1.5929929999999908, 1.1186076509517306e-15, -5.037761000000001), (-2.3528759999999904, 1.1736029925657476e-15, -5.285438000000003), (-2.96369399999999, 1.2866259169186378e-15, -5.794448000000003), (-3.2774089999999902, 1.4494230260453378e-15, -6.5276210000000034), (-3.3580179999999893, 1.6258949742109507e-15, -7.322380000000003), (-3.2774089999999894, 1.8023620373952554e-15, -8.117117000000002), (-2.963693999999989, 1.9651655858154983e-15, -8.850319000000002), (-2.3528759999999886, 2.0781778520273518e-15, -9.359281000000001), (-1.5929929999999886, 2.133192955611207e-15, -9.607047000000001), (-0.8005169999999887, 2.1576784803301054e-15, -9.717320000000003), (1.1433131774651884e-14, 2.163852208525441e-15, -9.745124000000002), (1.1018886691971375e-14, 1.9567296671851863e-15, -8.812327000000002), (-0.5701059999999889, 1.9529329264855732e-15, -8.795228000000002), (-1.134485999999989, 1.937874749557977e-15, -8.727412000000001), (-1.675652999999989, 1.9040413690163404e-15, -8.575040000000001), (-2.1106609999999892, 1.834540519496386e-15, -8.262036000000002), (-2.3340799999999895, 1.73441883077885e-15, -7.811128000000004), (-2.391487999999989, 1.6258945301217408e-15, -7.322378000000003), (-2.3340799999999904, 1.5173671208401629e-15, -6.833614000000003), (-2.11066099999999, 1.4172494289255154e-15, -6.382724000000003), (-1.6756529999999903, 1.3477421401120181e-15, -6.0696910000000015), (-1.1344859999999903, 1.3139207499790474e-15, -5.917373000000001), (-0.5701059999999902, 1.2988419229031934e-15, -5.849464000000001), (9.6957313289181e-15, 1.2951519856585492e-15, -5.832846000000001), (0.5701060000000098, 1.2988419229031934e-15, -5.849464000000001), (1.1344860000000099, 1.3139207499790474e-15, -5.917373000000001), (1.6756530000000098, 1.3477421401120181e-15, -6.0696910000000015), (2.1106610000000097, 1.4172494289255154e-15, -6.382724), (2.33408000000001, 1.5173671208401629e-15, -6.833614), (2.3914880000000105, 1.6258945301217408e-15, -7.322378), (2.334080000000011, 1.73441883077885e-15, -7.811128), (2.1106610000000106, 1.834540519496386e-15, -8.262036000000002), (1.6756530000000112, 1.9040413690163404e-15, -8.575040000000001), (1.1344860000000112, 1.937874749557977e-15, -8.727412000000001), (0.5701060000000111, 1.9529329264855732e-15, -8.795228000000002), (1.1018886691971375e-14, 1.9567296671851863e-15, -8.812327000000002), (1.1433131774651884e-14, 2.163852208525441e-15, -9.745124000000002), (0.8005170000000114, 2.1576784803301054e-15, -9.717320000000003), (1.5929930000000116, 2.133192955611207e-15, -9.607047000000001), (2.3528760000000117, 2.0781778520273518e-15, -9.359281000000001), (2.9636940000000105, 1.9651655858154983e-15, -8.850319000000002), (3.2774090000000107, 1.8023620373952554e-15, -8.117117000000002), (3.3580180000000106, 1.6258949742109507e-15, -7.32238), (3.27740900000001, 1.4494230260453378e-15, -6.527621), (2.9636940000000096, 1.2866259169186378e-15, -5.794447999999999), (2.35287600000001, 1.1736029925657476e-15, -5.285437999999999), (1.5929930000000094, 1.1186076509517306e-15, -5.037761000000001), (0.49919000000000935, 1.094088597497489e-15, -4.9273370000000005), (0.5018120000000034, -1.936380167322227e-15, 8.720681000000003)])

    def locator(self):
        return cmds.curve(d=1, p = [(0.0, 6.645164604912492, 0.0), (0.0, -6.645164604912492, 0.0), (0.0, 0.0, 0.0), (0.0, 0.0, 6.645164604912495), (0.0, 0.0, -6.645164604912491), (0.0, 0.0, 0.0), (6.645164604912495, 0.0, 0.0), (-6.645164604912495, 0.0, 0.0)])

    def nasalStrip(self):
        return cmds.curve(d=1, p = [(-4.151755911192104, -0.0004901993858952183, -7.844064966820119), (-4.153477893196038, -0.00016339979529849226, -7.076897469950714), (-4.155199875199972, 0.0001633997952982338, -6.309729973081309), (-4.156921857203906, 0.0004901993858949598, -5.542562476211902), (-3.2331614445019214, 0.0004901993858949598, -5.542562476211902), (-2.3094010317999376, 0.0004901993858949598, -5.542562476211903), (-1.385640619097953, 0.0004901993858949598, -5.542562476211903), (-1.3856406190979516, 0.0004901993858949598, -1.8475208254039672), (-1.3856406190979498, 0.0004901993858949598, 1.8475208254039686), (-1.3856406190979482, 0.0004901993858949598, 5.542562476211905), (-2.3094010317999323, 0.0004901993858949598, 5.542562476211905), (-3.233161444501916, 0.0004901993858949598, 5.542562476211906), (-4.1569218572039, 0.0004901993858949598, 5.542562476211906), (-4.1569218572039, 0.0004901993858949598, 6.310060107739699), (-4.1569218572038995, 0.0004901993858949598, 7.077557739267491), (-4.1569218572038995, 0.0004901993858949598, 7.8450553707952855), (-4.22162063575069, 0.0004901993858947014, 9.243451142692606), (-3.257412291079123, 0.0004901993858947603, 11.571256005352009), (-4.4971506294974666e-11, 0.0004901993858949598, 12.920520354539171), (3.2574122909891825, 0.0004901993858951593, 11.57125600535201), (4.221620635750699, 0.0004901993858952183, 9.243451142475443), (4.156921857113957, 0.0004901993858949598, 7.845055370795282), (4.156921857113957, 0.0004901993858949598, 7.077557739267488), (4.156921857113956, 0.0004901993858949598, 6.310060107739695), (4.156921857113956, 0.0004901993858949598, 5.542562476211902), (3.233161444411972, 0.0004901993858949598, 5.542562476211902), (2.3094010317099882, 0.0004901993858949598, 5.542562476211903), (1.3856406190080037, 0.0004901993858949598, 5.542562476211903), (1.3856406190080022, 0.0004901993858949598, 1.8475208254039672), (1.3856406190080004, 0.0004901993858949598, -1.8475208254039686), (1.3856406190079988, 0.0004901993858949598, -5.542562476211905), (2.309401031709983, 0.0004901993858949598, -5.542562476211905), (3.2331614444119667, 0.0004901993858949598, -5.542562476211906), (4.156921857113951, 0.0004901993858949598, -5.542562476211906), (4.156921857113951, 0.0004901993858949598, -6.310060107739699), (4.15692185711395, 0.0004901993858949598, -7.077557739267491), (4.15692185711395, 0.0004901993858949598, -7.845055370795286), (4.22162063566074, 0.0004901993858952183, -9.243451142692608), (3.2574122909891736, 0.0004901993858951593, -11.571256005352012), (-4.497917286767461e-11, 0.0004901993858949598, -12.920520354539171), (-3.2574122910791323, 0.0004901993858947603, -11.571256005352009), (-4.221620635750699, 0.0004901993858947014, -9.243451142692605), (-4.151755911192104, -0.0004901993858952179, -7.844064966820119)])

    def pinArrow(self):
        return cmds.curve(d=1, p = [(1.746602862340297e-14, 2.430056156299543e-14, 13.67999999999999), (-2.2799999999999834, 2.4047430713380893e-14, 13.679999999999994), (2.3288038164537295e-14, 3.240074875066057e-14, 18.23999999999999), (2.280000000000018, 2.4553692412609965e-14, 13.679999999999987), (1.746602862340297e-14, 2.430056156299543e-14, 13.67999999999999), (2.911004770567165e-15, 4.0500935938325715e-15, 2.2799999999999865), (0.5894871600000031, 3.974021445252163e-15, 2.2003322399999856), (1.1390378400000027, 3.630672482657361e-15, 1.9726970399999852), (1.6122153600000022, 3.042863667701568e-15, 1.6122164999999846), (1.9726987500000022, 2.242350202186216e-15, 1.1390372699999838), (2.2003299600000017, 1.2914262592644835e-15, 0.5894877299999836), (2.2800171000000007, 2.5313251457763645e-16, -1.3145911674218222e-07), (2.20032996, -8.02853850068175e-16, -0.5894871600000169), (1.9726987499999995, -1.804324100129762e-15, -1.1390378400000167), (1.6122153599999987, -2.6848779199895034e-15, -1.6122153600000164), (1.1390378399999979, -3.3777583130500954e-15, -1.9726987500000164), (0.5894871599999973, -3.843124951607991e-15, -2.200329960000016), (-2.9110266031029375e-15, -4.050123969534525e-15, -2.280017100000015), (-0.5894871600000031, -3.974017395158569e-15, -2.200329960000014), (-1.1390378400000027, -3.630675520227556e-15, -1.9726987500000137), (-1.6122153600000022, -3.0428616426547706e-15, -1.6122153600000129), (-1.9726987500000022, -2.2423512147096148e-15, -1.1390378400000123), (-2.2003299600000017, -1.2914252467410849e-15, -0.589487160000012), (-2.2800171000000007, -2.531329816141792e-16, -1.3145911167952728e-07), (-2.20032996, 8.028548625915734e-16, 0.5894877299999884), (-1.9726987499999995, 1.8043230876063632e-15, 1.1390372699999882), (-1.6122153599999987, 2.6848799450363006e-15, 1.6122164999999882), (-1.1390378399999979, 3.3777552754798995e-15, 1.972697039999988), (-0.5894871599999973, 3.843129001701585e-15, 2.2003322399999874), (2.911004770567165e-15, 4.0500935938325715e-15, 2.2799999999999865)])

    def pinCircle(self):
        return cmds.curve(d=1, p = [(3.547204608267407e-14, 3.525168326135031e-15, -15.875946760000005), (0.5863840100000356, 3.5427692979261848e-15, -15.955214490000003), (1.1330407400000357, 3.593047579464326e-15, -16.181647740000006), (1.6037267400000361, 3.672669413035124e-15, -16.540232600000007), (1.9623116000000362, 3.777182699948867e-15, -17.010918600000004), (2.1887448500000364, 3.898564877591326e-15, -17.557575330000002), (2.2680125800000366, 4.0287682834261315e-15, -18.143959340000002), (2.1887448500000364, 4.158971689260937e-15, -18.730343350000002), (1.9623116000000371, 4.280353518293367e-15, -19.276998510000002), (1.6037267400000375, 4.3848671538171405e-15, -19.747686080000005), (1.1330407400000375, 4.464488638777908e-15, -20.106269370000003), (0.5863840100000376, 4.514767617536108e-15, -20.332705760000003), (3.748643754519776e-14, 4.532364057396876e-15, -20.411953080000004), (-0.5863840099999625, 4.514767617536108e-15, -20.332705760000003), (-1.133040739999963, 4.464488638777908e-15, -20.106269370000003), (-1.6037267399999628, 4.3848671538171405e-15, -19.747686080000005), (-1.9623115999999634, 4.280353518293367e-15, -19.276998510000002), (-2.1887448499999635, 4.158971689260937e-15, -18.730343350000002), (-2.2680125799999638, 4.0287682834261315e-15, -18.143959340000002), (-2.1887448499999635, 3.898564877591326e-15, -17.557575330000002), (-1.9623115999999643, 3.777182699948867e-15, -17.010918600000004), (-1.6037267399999642, 3.672669413035124e-15, -16.540232600000007), (-1.1330407399999647, 3.593047579464326e-15, -16.181647740000006), (-0.5863840099999645, 3.5427692979261848e-15, -15.955214490000003), (3.547204608267407e-14, 3.525168326135031e-15, -15.875946760000005), (2.842170943040401e-14, -1.4012984643248174e-45, 8.881784197001284e-16)])

    def pinStarBurst(self):
        return cmds.curve(d=1, p = [(7.64032770383949e-15, 3.8201638519197445e-15, -17.204488500000004), (0.5806377500000071, 3.488831190612274e-15, -15.712298850000005), (0.3372412500000077, 3.840336981753012e-15, -17.295340200000005), (1.5881625500000076, 3.6173762985036716e-15, -16.291214550000003), (0.5840307000000079, 3.895135247677928e-15, -17.542129650000003), (2.1670782500000083, 3.84109208884098e-15, -17.298740900000002), (0.6748824000000081, 3.970017847798602e-15, -17.879370900000005), (2.1670782500000083, 4.098946704278461e-15, -18.460014850000004), (0.5840307000000081, 4.044900792088413e-15, -18.216613700000003), (1.588162550000009, 4.32266249461577e-15, -19.467541200000003), (0.33724125000000826, 4.099698713844191e-15, -18.463401600000005), (0.5806377500000091, 4.451208290845443e-15, -20.046460000000003), (8.239742310678369e-15, 4.1198711553391836e-15, -18.554250200000006), (-0.5806377499999913, 4.451208290845443e-15, -20.046460000000003), (-0.33724124999999183, 4.099698713844191e-15, -18.463401600000005), (-1.588162549999992, 4.32266249461577e-15, -19.467541200000003), (-0.5840306999999921, 4.044900792088413e-15, -18.216613700000003), (-2.1670782499999923, 4.098946704278461e-15, -18.460014850000004), (-0.6748823999999921, 3.970017847798602e-15, -17.879370900000005), (-2.1670782499999923, 3.84109208884098e-15, -17.298740900000002), (-0.5840306999999924, 3.895135247677928e-15, -17.542129650000003), (-1.5881625499999934, 3.6173762985036716e-15, -16.291214550000003), (-0.3372412499999924, 3.840336981753012e-15, -17.295340200000005), (-0.5806377499999933, 3.488831190612274e-15, -15.712298850000005), (7.64032770383949e-15, 3.8201638519197445e-15, -17.204488500000004), (0.0, 0.0, 0.0)])

    def pyramid(self):
        return cmds.curve(d=1, p = [(6.000000000000005, -1.8857872925866696e-16, 6.0000000000000115), (-5.999999999999993, 1.8857872925866696e-16, 6.000000000000015), (-5.999999999999991, 1.8857872925866696e-16, -5.999999999999983), (6.000000000000007, -1.8857872925866696e-16, -5.999999999999987), (6.000000000000005, -1.8857872925866696e-16, 6.0000000000000115), (7.105427357601002e-15, 17.84, 1.4210854715202004e-14), (-5.999999999999993, 1.8857872925866696e-16, 6.000000000000015), (-5.999999999999991, 1.8857872925866696e-16, -5.999999999999983), (7.105427357601002e-15, 17.84, 1.4210854715202004e-14), (6.000000000000007, -1.8857872925866696e-16, -5.999999999999987), (6.000000000000005, -1.8857872925866696e-16, 6.0000000000000115), (7.105427357601002e-15, 17.84, 1.4210854715202004e-14), (-5.999999999999993, 1.8857872925866696e-16, 6.000000000000015)])

    def shoulder(self):
        return cmds.curve(d=1, p = [(3.7379480000000282, 5.103348, 8.06632e-08), (3.7307880000000284, 4.988704, -1.42744), (3.683008000000029, 4.69134, -2.744012), (3.565904000000029, 4.275316, -3.91374), (3.360304000000029, 3.786712, -4.927716), (3.054364000000029, 3.259964, -5.783064), (2.6468600000000295, 2.724444, -6.485696), (2.1486200000000295, 2.205708, -7.062684), (1.5504680000000293, 1.732532, -7.521288), (0.8383440000000293, 1.35512, -7.846164), (2.930711096027494e-14, 1.189452, -7.974988), (-0.8383439999999707, 1.35512, -7.846164), (-1.5504679999999706, 1.732532, -7.521288), (-2.148619999999971, 2.205708, -7.062684), (-2.646859999999971, 2.724444, -6.485696), (-3.054363999999971, 3.259964, -5.783064), (-3.3603039999999713, 3.786712, -4.927716), (-3.5659039999999713, 4.275316, -3.91374), (-3.683007999999971, 4.69134, -2.744012), (-3.7307879999999716, 4.988704, -1.42744), (-3.7379479999999714, 5.103348, 8.06632e-08), (-3.670287999999972, 5.882468, 0.0), (-3.4278839999999717, 6.628516, 0.0), (-3.0356639999999717, 7.30786, 0.0), (-2.5107679999999717, 7.890816, 0.0), (-1.8761439999999716, 8.351896, 0.0), (-1.1595199999999717, 8.670956, 0.0), (-0.3922203999999716, 8.834052, 0.0), (0.39222040000002845, 8.834052, 0.0), (1.1595200000000285, 8.670956, 0.0), (1.8761440000000285, 8.351896, 0.0), (2.5107680000000285, 7.890816, 0.0), (3.0356640000000286, 7.30786, 0.0), (3.4278840000000286, 6.628516, 0.0), (3.6702880000000286, 5.882468, 0.0), (3.7379480000000282, 5.103348, 8.06632e-08), (3.7307880000000284, 4.988704, 1.42744), (3.683008000000028, 4.691336, 2.744012), (3.565904000000028, 4.27532, 3.91374), (3.360304000000028, 3.786712, 4.92772), (3.054364000000028, 3.259968, 5.78306), (2.6468600000000277, 2.72444, 6.485704), (2.1486200000000277, 2.20572, 7.062676), (1.5504680000000275, 1.732508, 7.521304), (0.8383440000000275, 1.355152, 7.846144), (2.75362954660352e-14, 1.189272, 7.9751), (-0.8383439999999724, 1.355152, 7.846144), (-1.5504679999999724, 1.732508, 7.521304), (-2.1486199999999727, 2.20572, 7.062676), (-2.6468599999999727, 2.72444, 6.485704), (-3.054363999999972, 3.259968, 5.78306), (-3.360303999999972, 3.786712, 4.92772), (-3.565903999999972, 4.27532, 3.91374), (-3.683007999999972, 4.691336, 2.744012), (-3.7307879999999716, 4.988704, 1.42744), (-3.7379479999999714, 5.103348, 8.06632e-08)])

    def slideback(self):
        return cmds.curve(d=1, p = [(-2.5, 0.0, 11.999999999999998), (2.5, 0.0, 11.999999999999998), (2.5, 0.0, 10.999999999999998), (0.5, 0.0, 10.999999999999998), (0.5, 0.0, -11.000000000000002), (2.5, 0.0, -11.0), (2.5, 0.0, -12.0), (-2.5, 0.0, -12.000000000000002), (-2.5, 0.0, -11.000000000000002), (-0.5, 0.0, -11.000000000000002), (-0.5, 0.0, 10.999999999999998), (-2.5, 0.0, 10.999999999999998), (-2.5, 0.0, 11.999999999999998)])

    def slideKnob(self):
        return cmds.curve(d=1, p = [(1.565186889454956, 9.936861240835352e-17, -0.5057343044752528), (-1.5651868894549554, 1.216914531216041e-32, -0.505734304475253), (-1.5651868894549565, -9.936861240835352e-17, 0.5057343044752527), (1.5651868894549552, -2.433829062432082e-32, 0.5057343044752531), (1.5651868894549568, 9.936861240835352e-17, -0.5057343044752527)])

    def sphereHalf(self):
        return cmds.curve(d=1, p = [(-6.283766, 0.0, 9.1204e-10), (-6.203579, 0.0, -0.982165), (-5.969952, 0.0, -1.939507), (-5.592832, 0.0, -2.849955), (-5.081088, 0.0, -3.692098), (-4.443293, 0.0, -4.443293), (-3.692098, 0.0, -5.081088), (-2.849955, 0.0, -5.592832), (-1.939507, 0.0, -5.969952), (-0.982165, 0.0, -6.20358), (0.0, 0.0, -6.283764), (0.0, 0.982162, -6.20358), (0.0, 1.939508, -5.969952), (0.0, 2.849954, -5.592832), (0.0, 3.692098, -5.081088), (0.0, 4.443293, -4.443293), (0.0, 5.081089, -3.692098), (0.0, 5.592832, -2.849955), (0.0, 5.969952, -1.939507), (0.0, 6.203579, -0.982165), (0.0, 6.283766, 0.0), (0.0, 6.203579, 0.982165), (0.0, 5.969952, 1.939507), (0.0, 5.592832, 2.849955), (0.0, 5.081089, 3.692098), (0.0, 4.443293, 4.443293), (0.0, 3.692098, 5.081088), (0.0, 2.849954, 5.592832), (0.0, 1.939508, 5.969952), (0.0, 0.982162, 6.20358), (0.0, 0.0, 6.283766), (-0.982165, 0.0, 6.203579), (-1.939507, 0.0, 5.969952), (-2.849955, 0.0, 5.592832), (-3.692098, 0.0, 5.081088), (-4.443293, 0.0, 4.443293), (-5.081088, 0.0, 3.692098), (-5.592832, 0.0, 2.849955), (-5.969952, 0.0, 1.939507), (-6.203579, 0.0, 0.982165), (-6.283766, 0.0, 9.1204e-10), (-6.20358, 0.982162, 0.0), (-5.969952, 1.939508, 0.0), (-5.592832, 2.849954, 0.0), (-5.081088, 3.692098, 0.0), (-4.443293, 4.443293, 0.0), (-3.692098, 5.081089, 0.0), (-2.849955, 5.592832, 0.0), (-1.939507, 5.969952, 0.0), (-0.982165, 6.203579, 0.0), (0.0, 6.283766, 0.0), (0.982165, 6.203579, 0.0), (1.939507, 5.969952, 0.0), (2.849955, 5.592832, 0.0), (3.692098, 5.081089, 0.0), (4.443293, 4.443293, 0.0), (5.081088, 3.692098, 0.0), (5.592832, 2.849954, 0.0), (5.969952, 1.939508, 0.0), (6.20358, 0.982162, 0.0), (6.283766, 0.0, 9.12045e-10), (6.203579, 0.0, 0.982165), (5.969952, 0.0, 1.939507), (5.592832, 0.0, 2.849955), (5.081088, 0.0, 3.692098), (4.443293, 0.0, 4.443293), (3.692098, 0.0, 5.081088), (2.849955, 0.0, 5.592832), (1.939507, 0.0, 5.969952), (0.982165, 0.0, 6.203579), (0.0, 0.0, 6.283766), (0.982165, 0.0, 6.203579), (1.939507, 0.0, 5.969952), (2.849955, 0.0, 5.592832), (3.692098, 0.0, 5.081088), (4.443293, 0.0, 4.443293), (5.081088, 0.0, 3.692098), (5.592832, 0.0, 2.849955), (5.969952, 0.0, 1.939507), (6.203579, 0.0, 0.982165), (6.283766, 0.0, 9.12045e-10), (6.203579, 0.0, -0.982165), (5.969952, 0.0, -1.939507), (5.592832, 0.0, -2.849955), (5.081088, 0.0, -3.692098), (4.443293, 0.0, -4.443293), (3.692098, 0.0, -5.081088), (2.849955, 0.0, -5.592832), (1.939507, 0.0, -5.969952), (0.982165, 0.0, -6.20358), (0.0, 0.0, -6.283764)])

    def sphere(self):
        return cmds.curve(d=1, p = [(-4.715625702467758, 4.715625702467749, 0.0), (0.0, 6.668901823505049, 0.0), (4.715625702467747, 4.715625702467752, 0.0), (6.6689018235050455, 1.9324809057013305e-15, 0.0), (4.715625702467754, -4.71562570246775, 0.0), (0.0, -6.66890182350505, 0.0), (-4.715625702467751, -4.715625702467753, 0.0), (-6.668901823505049, -3.581880178661197e-15, 0.0), (-4.715625702467747, 2.88748796125206e-16, -4.715625702467758), (-6.668901823505049, 4.0835246359916996e-16, 0.0), (-4.715625702467754, 2.88748796125206e-16, 4.715625702467747), (-7.105427357601002e-15, 0.0, 6.668901823505053), (4.715625702467747, -2.88748796125206e-16, 4.715625702467754), (6.668901823505053, -4.083524635991731e-16, 7.105427357601002e-15), (4.715625702467754, -2.88748796125206e-16, -4.715625702467747), (7.105427357601002e-15, 0.0, -6.668901823505049), (0.0, 4.715625702467749, -4.715625702467754), (0.0, 6.668901823505049, 0.0), (-3.552713678800501e-15, 4.715625702467752, 4.715625702467754), (-3.552713678800501e-15, 1.9324809057013305e-15, 6.668901823505053), (-3.552713678800501e-15, -4.71562570246775, 4.715625702467754), (0.0, -6.66890182350505, 0.0), (0.0, -4.715625702467753, -4.715625702467747), (3.552713678800501e-15, -3.581880178661197e-15, -6.668901823505049)])

    def spiral(self):
        return cmds.curve(d=1, p = [(7.120469552687561, 3.1554436208840472e-30, 3.3680323210398964), (7.6856521290504425, 3.1554436208840472e-30, 0.4861718916915958), (7.244393085829764, 3.1554436208840472e-30, -3.5532780419113634), (3.412676537385686, 3.1554436208840472e-30, -7.565412112728127), (-2.0979177636936797, 3.1554436208840472e-30, -8.315886075119073), (-7.037119719411125, 3.1554436208840472e-30, -6.110252159382209), (-9.161802322336396, 3.1554436208840472e-30, -0.9824651979939565), (-7.414307280313161, 3.1554436208840472e-30, 4.618900316779057), (-1.7564576395735378, 3.1554436208840472e-30, 6.576684345612268), (2.298926616968394, 3.1554436208840472e-30, 5.2443848587844695), (3.8197858543455783, 3.1554436208840472e-30, 2.0738841019324883), (3.2639884074106673, 3.1554436208840472e-30, -1.282199035252927), (1.2458321853388186, 3.1554436208840472e-30, -3.5397447671336257), (-2.629925935355966, 3.1554436208840472e-30, -4.109410920764388), (-5.108322959579377, 3.1554436208840472e-30, -1.409980297147337), (-3.9156646271647997, 3.1554436208840472e-30, 2.461770615137273), (-0.14560375074137166, 3.1554436208840472e-30, 2.2466250796468796), (-0.18632468867057383, 3.1554436208840472e-30, 0.8777323449460934)])

    def square(self):
        return cmds.curve(d=1, p = [(-5.944055480916461, 0.0, 5.944055480916451), (-5.944055480916447, 0.0, -5.9440554809164565), (5.944055480916461, 0.0, -5.944055480916451), (5.944055480916447, 0.0, 5.9440554809164565), (-5.944055480916461, 0.0, 5.944055480916451)])

    def sunDial(self):
        return cmds.curve(d=1, p = [(-1.155742168634788e-13, 8.881784197001252e-16, -7.319490876021282), (-2.3141245227017717, 0.0, -7.280785782425505), (-5.411653616836298, 0.0, -5.585763876154474), (-7.102797362124098, 0.0, -2.3141245227017757), (-7.411828492055704, 0.0, -8.737295000707069e-15), (-7.122142946492787, 0.0, 2.314124522701767), (-5.411653616836302, 0.0, 5.411653616836292), (-2.3141245227017744, 0.0, 7.122142946492785), (-0.8289158976429978, -3.552713678800501e-15, 8.030443612685172), (-3.762575863679131e-15, -8.881784197001252e-16, 11.632279533382093), (0.8289158976429905, -3.552713678800501e-15, 8.030443612685197), (2.314124522701769, 0.0, 7.122142946492787), (5.411653616836294, 0.0, 5.411653616836297), (7.122142946492787, 0.0, 2.314124522701771), (7.411828492055704, 0.0, -6.4476448193705836e-15), (7.102797362124102, 0.0, -2.3141245227017775), (5.411653616836302, 0.0, -5.411653616836297), (2.3141245227017744, 0.0, -7.164712276213403), (-1.155742168634788e-13, 8.881784197001252e-16, -7.319490876021282)])

    def sun(self):
        return cmds.curve(d=1, p = [(-2.4840541277898396, 1.5210444682532985e-16, -2.4840541277898494), (-3.512983037189265, 2.151081715976389e-16, -6.34626243467104e-15), (-2.4840541277898396, 1.5210444682532995e-16, 2.4840541277898347), (0.0, 6.233296654744905e-32, 3.5129830371892576), (2.4840541277898396, -1.521044468253299e-16, 2.484054127789837), (3.512983037189265, -2.1510817159763891e-16, -2.5683657230355016e-15), (2.4840541277898396, -1.5210444682532997e-16, -2.484054127789844), (0.0, -1.1553501858401613e-31, -3.5129830371892683), (-6.009900832683016, 3.680002908969132e-16, -2.4893824334146673), (-13.010139571653717, 7.966412891443021e-16, -1.4048897226532252e-14), (-6.009900832683016, 3.680002908969132e-16, 2.489382433414653), (-9.199557915299792, 5.633104577271292e-16, 9.199557915299783), (-2.4893824334146615, 1.5243071144674567e-16, 6.009900832683007), (-7.105427357601002e-15, -3.674713923554702e-32, 13.010139571653719), (2.4893824334146615, -1.5243071144674577e-16, 6.009900832683007), (9.199557915299792, -5.633104577271294e-16, 9.19955791529979), (6.009900832683016, -3.6800029089691336e-16, 2.4893824334146575), (13.010139571653717, -7.966412891443021e-16, -3.924833036582634e-16), (6.009900832683016, -3.6800029089691336e-16, -2.489382433414667), (9.199557915299792, -5.63310457727129e-16, -9.199557915299788), (2.4893824334146615, -1.5243071144674567e-16, -6.009900832683022), (0.0, 1.3685899525244366e-31, -13.010139571653719), (-2.4893824334146615, 1.5243071144674582e-16, -6.009900832683022), (-9.199557915299792, 5.633104577271294e-16, -9.199557915299794)])

    def thinArrow(self):
        return cmds.curve(d=1, p = [(-1.5712704407860123, 3.1554436208840472e-30, -3.787656185431019), (-4.990721160500833, 3.1554436208840472e-30, -3.7876561854310196), (6.2020701074860796e-15, 3.1554436208840472e-30, -13.797568067187052), (4.990721160500829, 3.1554436208840472e-30, -3.7876561854310187), (1.5712704407860087, 3.1554436208840472e-30, -3.787656185431019), (1.5712704407860236, 3.1554436208840472e-30, 13.79756806718703), (-1.5712704407859974, 3.1554436208840472e-30, 13.79756806718703), (-1.5712704407860123, 3.1554436208840472e-30, -3.787656185431019)])

    def wing(self):
        return cmds.curve(d=1, p = [(-4.607626171660596, -3.1554436208840472e-30, -13.27154603491643), (-4.970028627645807, -3.1554436208840472e-30, -13.300735155548107), (-5.077439389651393, -3.1554436208840472e-30, -13.13790189375607), (-5.032152355351687, -3.1554436208840472e-30, -12.726811427226036), (-5.0398343530283265, -3.1554436208840472e-30, -8.906006258318971), (-5.017742004499682, -3.1554436208840472e-30, -8.77149316097405), (-4.938519339134979, -3.1554436208840472e-30, -8.328590405626176), (-2.7141649627471782, -3.1554436208840472e-30, -8.030283866335953), (-0.15758931082135896, -3.1554436208840472e-30, -6.599344407725134), (0.9407625675779336, -3.1554436208840472e-30, -4.716232093666477), (1.5335180309596907, -3.1554436208840472e-30, -2.4452514287894136), (1.5854503441583547, -3.1554436208840472e-30, 2.098177236584432), (1.6273614816955269, -3.1554436208840472e-30, 7.938582623027278), (1.429073671859758, -3.1554436208840472e-30, 8.52559785478335), (2.3018857090643623, -3.1554436208840472e-30, 9.68603329337888), (4.619214190144864, -3.1554436208840472e-30, 12.753572527168718), (4.99713270114546, -3.1554436208840472e-30, 13.310087825407468), (5.021918298158508, -3.1554436208840472e-30, 12.739996254998704), (5.026032959995544, -3.1554436208840472e-30, 10.07705690571564), (5.07743938965139, -3.1554436208840472e-30, 2.567784655603101), (5.049948545575192, -3.1554436208840472e-30, -2.8036298833388544), (5.013517539187148, -3.1554436208840472e-30, -5.529268543887502), (4.9813140844837545, -3.1554436208840472e-30, -10.700191127707637), (5.005555534165926, -3.1554436208840472e-30, -12.645770898380189), (4.981206018875201, -3.1554436208840472e-30, -13.140227599030208), (4.751707908538424, -3.1554436208840472e-30, -13.310087825407546), (-0.17266421525681241, -3.1554436208840472e-30, -13.262124725792852), (-2.9725696741488252, -3.1554436208840472e-30, -13.288047310529695), (-4.474957969164092, -3.1554436208840472e-30, -13.275195137499555)])

    def wireArrow180(self):
        return cmds.curve(d=1, p = [(-3.98114289898873, 0.0, -11.916975235140498), (-8.208446054059511, 0.71592, -8.97463391505193), (-7.12621935033437, 0.71592, -7.962168020157443), (-3.98114289898873, 0.0, -11.916975235140498), (-7.12621935033437, 0.71592, -7.962168020157443), (-7.12621935033437, -0.71592, -7.962168020157443), (-3.98114289898873, 0.0, -11.916975235140498), (-7.12621935033437, -0.71592, -7.962168020157443), (-8.208446054059511, -0.71592, -8.97463391505193), (-3.98114289898873, 0.0, -11.916975235140498), (-8.208446054059511, 0.71592, -8.97463391505193), (-8.208446054059511, -0.71592, -8.97463391505193), (-3.98114289898873, 0.0, -11.916975235140498), (-8.359610096689623, 0.0, -7.820745956813351), (-10.010206435456695, 0.0, -5.884383534008673), (-11.158849992940558, 0.0, -3.652953936696222), (-11.74793989050843, 0.0, -1.2383504490377406), (-11.747939890508427, 0.0, 1.2383504490377615), (-11.158849992940551, 0.0, 3.652953936696242), (-10.010206435456684, 0.0, 5.88438353400869), (-8.35961009668961, 0.0, 7.820745956813367), (-3.981142898988706, 0.0, 11.916975235140505), (-7.126219350334354, 0.71592, 7.962168020157456), (-8.208446054059493, 0.71592, 8.974633915051946), (-3.981142898988706, 0.0, 11.916975235140505), (-8.208446054059493, 0.71592, 8.974633915051946), (-8.208446054059493, -0.71592, 8.974633915051946), (-3.981142898988706, 0.0, 11.916975235140505), (-7.126219350334354, -0.71592, 7.962168020157456), (-8.208446054059493, -0.71592, 8.974633915051946), (-7.126219350334354, -0.71592, 7.962168020157456), (-7.126219350334354, 0.71592, 7.962168020157456)])

    def wireArrowBlunt(self):
        return cmds.curve(d=1, p = [(-1.7763568394002505e-15, 0.0, -8.0), (-3.999999999999999, 0.0, 4.000000000000001), (4.000000000000001, 0.0, 3.999999999999999), (-1.7763568394002505e-15, 0.0, -8.0), (8.881784197001252e-16, 4.0, 4.0), (8.881784197001252e-16, 0.0, 4.0), (8.881784197001252e-16, -4.0, 4.0), (-1.7763568394002505e-15, 0.0, -8.0)])

    def wireArrowCircle(self):
        return cmds.curve(d=1, p = [(6.36396, 0.0, 6.36396), (7.282767000000001, 0.0, 5.280657), (8.014149, 0.0, 4.074491999999999), (8.558664, 0.0, 2.752959), (8.879847, 0.0, 1.438893), (8.999976, 0.0, 0.01959459), (8.892528, 0.0, -1.360695), (8.517423, 0.0, -2.877138), (8.015151, 0.0, -4.072512), (7.300800000000001, 0.0, -5.255457), (6.392979, 0.0, -6.334802999999999), (5.378571, 0.0, -7.211433), (4.163892, 0.0, -7.968342), (2.827314, 0.0, -8.534205), (1.396275, 0.0, -8.886846), (-0.025200959999999998, 0.0, -8.999964), (-1.364817, 0.0, -8.891877000000001), (-2.825097, 0.0, -8.534943), (-4.048323, 0.0, -8.027328), (-5.271986999999999, 0.0, -7.2889859999999995), (-6.386646, 0.0, -6.341189999999999), (-7.233933, 0.0, -5.347986), (-7.984166999999999, 0.0, -4.133277), (-8.543787, 0.0, -2.7984359999999997), (-8.882559, 0.0, -1.422531), (-8.999997, 0.0, 0.00507957), (-8.894211, 0.0, 1.349958), (-8.556588000000001, 0.0, 2.759361), (-8.025552, 0.0, 4.05186), (-7.294884, 0.0, 5.263743), (-6.373695, 0.0, 6.35421), (-5.321754, 0.0, 7.2530730000000005), (-4.118058, 0.0, 7.991979000000001), (-2.771403, 0.0, 8.552661), (-1.227018, 0.0, 8.912562000000001), (0.0, 0.0, 9.0), (-1.860669, 1.7788350000000002, 9.0), (3.0, 0.0, 9.0), (-1.860669, -1.7788350000000002, 9.0), (0.0, 0.0, 9.0), (-1.860669, 0.0, 7.221165000000001), (3.0, 0.0, 9.0), (-1.860669, 0.0, 10.778834999999999), (0.0, 0.0, 9.0)])

    def wireArrowDial(self):
        return cmds.curve(d=1, p = [(2.5011104298755533e-14, -6.310887241768095e-30, -1.4210854715202002e-14), (-1.4008679974988898e-05, -6.2995149, -1.7008404420133515e-14), (2.4083205300000254, -5.814181799999999, -1.6258115536071927e-14), (4.454425080000026, -4.45442949, -1.5199937730692167e-14), (5.814184320000026, -2.4083129700000003, -1.3989352258825248e-14), (6.299512380000027, -6.310887241768095e-30, -1.281208197756456e-14), (2.5011104298755533e-14, -6.310887241768095e-30, -1.4210854715202002e-14), (6.299512380000027, -6.310887241768095e-30, -1.281208197756456e-14), (5.814184320000026, 2.4083129700000003, -1.1850340650987333e-14), (4.454425080000026, 4.45442949, -1.1243609585598336e-14), (2.4083205300000254, 5.814181799999999, -1.1094084733098696e-14), (-1.4008679974988898e-05, 6.2995149, -1.1413311231374124e-14), (2.5011104298755533e-14, -6.310887241768095e-30, -1.4210854715202002e-14), (-1.4008679974988898e-05, 6.2995149, -1.1413311231374124e-14), (-2.4082871399999752, 5.814181799999999, -1.2163586480262722e-14), (-4.454475479999976, 4.45442949, -1.3221782890759926e-14), (-5.8141118699999765, 2.4083129700000003, -1.443234108444713e-14), (-6.299999999999977, -6.310887241768095e-30, -1.56097357262297e-14), (2.5011104298755533e-14, -6.310887241768095e-30, -1.4210854715202002e-14), (-6.299999999999977, -6.310887241768095e-30, -1.56097357262297e-14), (-5.8141118699999765, -2.4083129700000003, -1.6571352692285043e-14), (-4.454475479999976, -4.45442949, -1.7178111035853758e-14), (-2.4082871399999752, -5.814181799999999, -1.7327617283235952e-14), (-1.4008679974988898e-05, -6.2995149, -1.7008404420133515e-14), (2.5011104298755533e-14, -6.310887241768095e-30, -1.4210854715202002e-14), (2.221334227670014e-14, -5.595524044110794e-15, 12.599999999999987), (2.5200000000000227, -5.595524044110794e-15, 12.599999999999987), (2.109423746787798e-14, -7.83373366175511e-15, 17.639999999999986), (-2.5199999999999783, -5.595524044110794e-15, 12.599999999999987), (2.221334227670014e-14, -5.595524044110794e-15, 12.599999999999987), (2.221334227670014e-14, 2.5199999999999942, 12.599999999999989), (2.109423746787798e-14, -7.83373366175511e-15, 17.639999999999986), (2.221334227670014e-14, -2.520000000000006, 12.599999999999985), (2.5200000000000227, -5.595524044110794e-15, 12.599999999999987), (2.221334227670014e-14, 2.5199999999999942, 12.599999999999989), (-2.5199999999999783, -5.595524044110794e-15, 12.599999999999987), (2.221334227670014e-14, -2.520000000000006, 12.599999999999985), (2.221334227670014e-14, -5.595524044110794e-15, 12.599999999999987)])

    def wireArrowTips(self):
        return cmds.curve(d=1, p = [(-1.0000000000000024, -1.0, 10.76342), (0.9999999999999976, -1.0, 10.76342), (0.9999999999999976, 1.0, 10.76342), (-1.0000000000000024, 1.0, 10.76342), (-1.0000000000000024, -1.0, 10.76342), (-3.1119036236759712e-15, 0.0, 14.014768), (0.9999999999999976, -1.0, 10.76342), (0.9999999999999976, 1.0, 10.76342), (-3.1119036236759712e-15, 0.0, 14.014768), (-1.0000000000000024, 1.0, 10.76342), (-3.1119036236759712e-15, 0.0, 14.014768), (0.0, 0.0, 0.0), (3.1119036236759712e-15, 0.0, -14.014768), (1.0000000000000024, 1.0, -10.76342), (-0.9999999999999976, 1.0, -10.76342), (3.1119036236759712e-15, 0.0, -14.014768), (-0.9999999999999976, 1.0, -10.76342), (-0.9999999999999976, -1.0, -10.76342), (3.1119036236759712e-15, 0.0, -14.014768), (-0.9999999999999976, -1.0, -10.76342), (1.0000000000000024, -1.0, -10.76342), (3.1119036236759712e-15, 0.0, -14.014768), (1.0000000000000024, -1.0, -10.76342), (1.0000000000000024, 1.0, -10.76342)])

    def wireCircleLocator(self):
        return cmds.curve(d=1, p = [(0.0, 0.0, 8.0), (0.0, 0.0, 4.004368), (0.0, 1.532404, 3.699556), (0.0, 2.831516, 2.831516), (0.0, 3.699556, 1.532404), (0.0, 4.004368, 0.0), (0.0, 8.0, 0.0), (0.0, 4.004368, 0.0), (0.0, 3.699556, -1.532404), (0.0, 2.831516, -2.831516), (0.0, 1.532404, -3.699556), (0.0, 0.0, -4.004368), (0.0, 0.0, -8.0), (0.0, 0.0, -4.004368), (0.0, -1.532404, -3.699556), (0.0, -2.831516, -2.831516), (0.0, -3.699556, -1.532404), (0.0, -4.004368, 0.0), (0.0, -8.0, 0.0), (0.0, -4.004368, 0.0), (0.0, -3.699556, 1.532404), (0.0, -2.831516, 2.831516), (0.0, -1.532404, 3.699556), (0.0, 0.0, 4.004368), (-1.532404, 0.0, 3.699556), (-2.831516, 0.0, 2.831516), (-3.699556, 0.0, 1.532404), (-4.004368, 0.0, 0.0), (-8.0, 0.0, 0.0), (-4.004368, 0.0, 0.0), (-3.699556, 0.0, -1.532404), (-2.831516, 0.0, -2.831516), (-1.532404, 0.0, -3.699556), (0.0, 0.0, -4.004368), (1.532404, 0.0, -3.699556), (2.831516, 0.0, -2.831516), (3.699556, 0.0, -1.532404), (4.004368, 0.0, 0.0), (8.0, 0.0, 0.0), (4.004368, 0.0, 0.0), (3.699556, 1.532404, 0.0), (2.831516, 2.831516, 0.0), (1.532404, 3.699556, 0.0), (0.0, 4.004368, 0.0), (-1.532404, 3.699556, 0.0), (-2.831516, 2.831516, 0.0), (-3.699556, 1.532404, 0.0), (-4.004368, 0.0, 0.0), (-3.699556, -1.532404, 0.0), (-2.831516, -2.831516, 0.0), (-1.532404, -3.699556, 0.0), (0.0, -4.004368, 0.0), (1.532404, -3.699556, 0.0), (2.831516, -2.831516, 0.0), (3.699556, -1.532404, 0.0), (4.004368, 0.0, 0.0), (3.699556, 0.0, 1.532404), (2.831516, 0.0, 2.831516), (1.532404, 0.0, 3.699556), (0.0, 0.0, 4.004368), (0.0, 0.0, 0.0), (0.0, 0.0, -4.004368), (0.0, 0.0, 0.0), (4.004368, 0.0, 0.0), (0.0, 0.0, 0.0), (-4.004368, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, -4.004368, 0.0), (0.0, 0.0, 0.0), (0.0, 4.004368, 0.0)])

    def wireFullCompass(self):
        return cmds.curve(d=1, p = [(0.913615, 0.0, -4.343115), (0.0, 0.0, -4.9483525), (-0.913615, 0.0, -4.343115), (0.0, 0.0, -8.182295), (0.913615, 0.0, -4.343115), (0.0, 0.0, -4.9483525), (0.0, 0.913615, -4.343115), (0.0, 0.0, -8.182295), (0.0, -0.913615, -4.343115), (0.0, 0.0, -4.9483525), (0.0, 0.0, 0.0), (0.0, 0.0, 4.9483525), (-0.913615, 0.0, 4.343115), (0.0, 0.0, 8.182295), (0.913615, 0.0, 4.343115), (0.0, 0.0, 4.9483525), (0.0, -0.913615, 4.343115), (0.0, 0.0, 8.182295), (0.0, 0.913615, 4.343115), (0.0, 0.0, 4.9483525), (0.0, 0.0, 0.0), (4.9483525, 0.0, 0.0), (4.343115, 0.0, 0.913615), (8.182295, 0.0, 0.0), (4.343115, 0.0, -0.913615), (4.9483525, 0.0, 0.0), (4.343115, 0.913615, 0.0), (8.182295, 0.0, 0.0), (4.343115, -0.913615, 0.0), (4.9483525, 0.0, 0.0), (0.0, 0.0, 0.0), (-4.9483525, 0.0, 0.0), (-4.343115, 0.0, 0.913615), (-8.182295, 0.0, 0.0), (-4.343115, 0.0, -0.913615), (-4.9483525, 0.0, 0.0), (-4.343115, 0.913615, 0.0), (-8.182295, 0.0, 0.0), (-4.343115, -0.913615, 0.0), (-4.9483525, 0.0, 0.0), (0.0, 0.0, 0.0), (0.0, 4.9483525, 0.0), (-0.913615, 4.343115, 0.0), (0.0, 8.182295, 0.0), (0.913615, 4.343115, 0.0), (0.0, 4.9483525, 0.0), (0.0, 4.343115, 0.913615), (0.0, 8.182295, 0.0), (0.0, 4.343115, -0.913615), (0.0, 4.9483525, 0.0), (0.0, 0.0, 0.0), (0.0, -4.9483525, 0.0), (-0.913615, -4.343115, 0.0), (0.0, -8.182295, 0.0), (0.913615, -4.343115, 0.0), (0.0, -4.9483525, 0.0), (0.0, -4.343115, -0.913615), (0.0, -8.182295, 0.0), (0.0, -4.343115, 0.913615), (0.0, -4.9483525, 0.0)])

    def wireThinArrow(self):
        return cmds.curve(d=1, p = [(7.7175899999999995, 0.0, 1.4210854715202004e-14), (9.706724999999999, 0.0, -2.2154639999999857), (7.657452000000001, 0.0, -2.2154639999999857), (6.0, 0.0, -0.3173189999999858), (-7.372278, 0.0, -0.3083519999999858), (-6.0, 0.0, -2.999999999999986), (-12.0, 0.0, 1.4210854715202004e-14), (-6.0, 0.0, 3.000000000000014), (-7.372278, 0.0, 0.28689390000001425), (6.0, 0.0, 0.28689390000001425), (7.657452000000001, 0.0, 2.215464000000014), (9.706724999999999, 0.0, 2.215464000000014), (7.7175899999999995, 0.0, 1.4210854715202004e-14)])

    def wireTransform(self):
        return cmds.curve(d=1, p = [(0.5291489999999718, 16.93278075, 0.9165135), (-0.5291497500000283, 16.93278075, 0.9165135), (-2.842170943040401e-14, 20.812974, 0.0), (0.5291489999999718, 16.93278075, 0.9165135), (1.0582987499999716, 16.93278075, 0.0), (-2.842170943040401e-14, 20.812974, 0.0), (1.0582987499999716, 16.93278075, 0.0), (0.5291497499999714, 16.93278075, -0.9165135), (-2.842170943040401e-14, 20.812974, 0.0), (0.5291497499999714, 16.93278075, -0.9165135), (-0.5291490000000286, 16.93278075, -0.91651425), (-2.842170943040401e-14, 20.812974, 0.0), (-0.5291490000000286, 16.93278075, -0.91651425), (-1.0582987500000285, 16.93278075, -1.6811100000000002e-07), (-2.842170943040401e-14, 20.812974, 0.0), (-1.0582987500000285, 16.93278075, -1.6811100000000002e-07), (-0.5291497500000283, 16.93278075, 0.9165135), (-2.842170943040401e-14, 20.812974, 0.0), (-2.842170943040401e-14, 0.0, 0.0), (-2.6111005135831533e-14, 0.0, 20.812974), (-0.9165135000000265, 0.52914975, 16.93278075), (-2.6541793124446044e-14, 1.05829875, 16.93278075), (-2.6111005135831533e-14, 0.0, 20.812974), (0.9165134999999734, 0.5291490000000001, 16.93278075), (-2.6541793124446044e-14, 1.05829875, 16.93278075), (0.9165134999999734, 0.5291490000000001, 16.93278075), (0.9165134999999734, -0.52914975, 16.93278075), (-2.6111005135831533e-14, 0.0, 20.812974), (0.9165134999999734, -0.52914975, 16.93278075), (-1.6811102654179314e-07, -1.05829875, 16.93278075), (-2.6111005135831533e-14, 0.0, 20.812974), (-1.6811102654179314e-07, -1.05829875, 16.93278075), (-0.9165142500000265, -0.5291490000000001, 16.93278075), (-2.6111005135831533e-14, 0.0, 20.812974), (-0.9165142500000265, -0.5291490000000001, 16.93278075), (-0.9165135000000265, 0.52914975, 16.93278075), (-2.6111005135831533e-14, 0.0, 20.812974), (-2.79517303747312e-14, 0.0, 4.233195), (-2.79517303747312e-14, 4.233195, 4.233195), (-2.842170943040401e-14, 4.233195, 0.0), (4.233194999999972, 4.233195, 0.0), (4.233194999999972, 0.0, 0.0), (-2.842170943040401e-14, 0.0, 0.0), (-2.79517303747312e-14, 0.0, 4.233195), (4.233194999999973, 0.0, 4.233195), (4.233194999999972, 0.0, 0.0), (20.812973999999972, 0.0, 0.0), (16.93278074999997, 1.05829875, 0.0), (16.93278074999997, 0.5291490000000001, -0.9165135), (20.812973999999972, 0.0, 0.0), (16.93278074999997, 0.5291490000000001, -0.9165135), (16.93278074999997, -0.52914975, -0.9165135), (20.812973999999972, 0.0, 0.0), (16.93278074999997, -1.05829875, 1.6811100000000002e-07), (16.93278074999997, -0.52914975, -0.9165135), (16.93278074999997, -1.05829875, 1.6811100000000002e-07), (16.93278074999997, -0.5291490000000001, 0.91651425), (20.812973999999972, 0.0, 0.0), (16.93278074999997, -0.5291490000000001, 0.91651425), (16.93278074999997, 0.52914975, 0.9165135), (16.93278074999997, 1.05829875, 0.0), (20.812973999999972, 0.0, 0.0), (16.93278074999997, 0.52914975, 0.9165135)])

    def Bulb(self):
        return cmds.curve(d=1, p = [(-0.139471, -0.798108, 0.0), (-0.139471, -0.798108, 0.0), (-0.139471, -0.798108, 0.0), (-0.299681, -0.672294, 0.0), (-0.299681, -0.672294, 0.0), (-0.299681, -0.672294, 0.0), (-0.121956, -0.578864, 0.0), (-0.121956, -0.578864, 0.0), (-0.121956, -0.578864, 0.0), (-0.285304, -0.51952, 0.0), (-0.285304, -0.51952, 0.0), (-0.0744873, -0.442806, 0.0), (-0.0744873, -0.442806, 0.0), (-0.287769, -0.373086, 0.0), (-0.287769, -0.373086, 0.0), (-0.100386, -0.296549, 0.0), (-0.100386, -0.296549, 0.0), (-0.264344, -0.205725, 0.0), (-0.264344, -0.205725, 0.0), (-0.262544, -0.0993145, 0.0), (-0.262544, -0.0993145, 0.0), (-0.167051, -0.0613459, 0.0), (-0.167051, -0.0613459, 0.0), (-0.167051, -0.0613459, 0.0), (-0.166024, 0.0163458, 0.0), (-0.157394, 0.232092, 0.0), (-0.367902, 0.680843, 0.0), (-0.96336, 1.224522, 0.0), (-1.006509, 1.992577, 0.0), (-0.316123, 2.613925, 0.0), (0.561786, 2.548479, 0.0), (1.094888, 2.001207, 0.0), (1.051638, 1.166965, 0.0), (0.436419, 0.66543, 0.0), (0.13283, 0.232092, 0.0), (0.15009, 0.0163458, 0.0), (0.15073, -0.046628, 0.0), (0.15073, -0.046628, 0.0), (0.270326, -0.0955798, 0.0), (0.270326, -0.0955798, 0.0), (0.267815, -0.208156, 0.0), (0.267815, -0.208156, 0.0), (0.0884224, -0.291145, 0.0), (0.0884224, -0.291145, 0.0), (0.292477, -0.366091, 0.0), (0.292477, -0.366091, 0.0), (0.0946189, -0.439723, 0.0), (0.0946189, -0.439723, 0.0), (0.306664, -0.508968, 0.0), (0.306664, -0.508968, 0.0), (0.112488, -0.57513, 0.0), (0.112488, -0.57513, 0.0), (0.323789, -0.674644, 0.0), (0.323789, -0.674644, 0.0), (0.152097, -0.794645, 0.0), (0.152097, -0.794645, 0.0), (0.152097, -0.794645, 0.0), (0.106716, -0.907397, 0.0), (0.0103741, -1.003739, 0.0), (-0.0919896, -0.907397, 0.0), (-0.139471, -0.798108, 0.0), (-0.139471, -0.798108, 0.0)])

#------------------------------------------------------------------------------------------------------
#Initialize menu window
#------------------------------------------------------------------------------------------------------
widget = SCPmain()
widget.show()










#--------------------------------------script over---------------------------------------------